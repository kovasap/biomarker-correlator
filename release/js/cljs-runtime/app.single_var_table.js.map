{"version":3,"sources":["app/single_var_table.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/int?","cljs.core/float?","cljs.spec.alpha/map-spec-impl","G__58254","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl","G__58267","cljs.core/coll?","G__58268","G__58294","cljs.spec.alpha.tuple_impl","G__58301","i__9377__auto__","v__9378__auto__","cljs.core.nth","app.single-var-table/OneToManyCorrelation","app.stats/CorrelationResults","app.single-var-table/aggregate-names","app.single-var-table/filter-insignificant","rows","p1__58302#","cljs.core.filter","app.stats/p-value-cutoff","app.single-var-table/calc-counted-score","correlations","cljs.core.reduce","cljs.core/+","p1__58306#","cljs.core.map","app.single-var-table/get-significant-correlations","data","one-var-type","one-var","many-var-type","one-var-raw-data","one-var-significant-correlations","G__58308","cljs.core/group-by","app.stats/round","cljs.core/count","iter__4652__auto__","s__58310","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__58312","cljs.core/chunk-buffer","i__58311","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58309","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","correlation","app.single-var-table/make-all-correlations","csv-data","unique-one-vars","cljs.core/set","p1__58315#","cljs.core.into","s__58319","b__58321","i__58320","iter__58318","p1__58316#","cljs.core.mapv","app.single-var-table/table-keys","app.single-var-table/get-one-var-timeseries-data","p1__58325#","cljs.core/select-keys","app.single-var-table/make-hiccup","app.biomarker-data/data","app.biomarker-data/make-acm-plot","s__58331","b__58333","i__58332","iter__58330","k","p1__58327#","cljs.core/keys","s__58339","b__58341","i__58340","iter__58338","p1__58328#","cljs.core.sort_by","mvar","cljs.core/name","app.ui/hover-to-render","s__58347","b__58349","i__58348","vec__58350","iter__58346","vec__58353","s__58357","b__58359","i__58358","vec__58360","iter__58356","vec__58363","v","cljs.core/chunk-first"],"sourcesContent":["(ns app.single-var-table\n  (:require\n    [app.stats :as stats]\n    [app.biomarker-data :as biodata]\n    [app.csv-data-processing :as proc]\n    [app.ui :as ui]\n    ; [spec-tools.data-spec :as ds]\n    [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n    [cljs.spec.alpha :as s]))\n\n; (def one-to-many-correlation\n;   (ds/spec ::one-to-many-correlation\n;     {:one-var keyword?\n;      :aggregates {:score int?\n;                   :average float?}\n;      :correlations [{:many-var keyword?\n;                      :regression-results :app.stats/regression-results}]}))\n; (s/def ::one-to-many-correlation one-to-many-correlation)\n; (s/def ::one-to-many-correlations\n;   (s/map-of keyword? ::one-to-many-correlation))\n\n(s/def ::one-var keyword?)\n(s/def ::many-var keyword?)\n\n(s/def ::score int?)\n(s/def ::average float?)\n(s/def ::aggregates (s/keys :req-un [::score ::average]))\n\n(s/def ::correlations\n  (s/coll-of (s/keys :req-un [::many-var :app.stats/regression-results])))\n\n(s/def ::one-to-many-correlation\n  (s/keys :req-un\n          [::one-var ::aggregates ::correlations]))\n(s/def ::one-to-many-correlations\n  (s/map-of keyword? ::one-to-many-correlation))\n\n(def OneToManyCorrelation\n  [:map [:one-var keyword?]\n        [:aggregates [:map [:score int?]\n                           [:average float?]\n                           [:acm-score float?]]]\n        [:correlations [:map [:many-var keyword?]\n                             [:regression-results stats/CorrelationResults]]]])\n\n; TODO generate these from the OneToManyCorrelation spec above\n(def aggregate-names #{:score :average :acm-score})\n\n\n(defn filter-insignificant\n  \"Filter row maps from the input that show statistically insignificant\n  correlations\"\n  [rows]\n  (filter #(< (:p-value (:regression-results %))\n              stats/p-value-cutoff)\n          rows))\n\n; TODO we may need to introduce a concept of \"up is good\" and \"down is bad\" so\n; that this score instead takes the difference between \"good\" and \"bad\"\n; correlations, not just positive and negative ones.\n(>defn calc-counted-score\n  \"Sums up all postive correlations and all negatives correlations, then takes\n  the difference.\"\n  [correlations]\n  [::pairwise-correlations\n   => int?]\n  (reduce + (map #(if (neg? (:correlation (:regression-results %))) -1 1)\n                 correlations)))\n\n\n(defn get-significant-correlations\n  {:malli/schema [:=> [:cat\n                       stats/PairwiseCorrelations\n                       :keyword\n                       :keyword\n                       :keyword\n                       [:vector float?]]\n                  OneToManyCorrelation]}\n  [data one-var-type one-var many-var-type one-var-raw-data]\n  ; [::pairwise-correlations keyword? keyword? keyword?\n  ;  | #(every? (fn [d] (contains? d one-var-type))  data)\n  ;  => ::one-to-many-correlation]\n  (let [one-var-significant-correlations\n        (one-var (group-by one-var-type (filter-insignificant data)))]\n    {:one-var one-var\n     :aggregates {:score (calc-counted-score one-var-significant-correlations)\n                  ; :acm-score 0\n                  :average (stats/round (/ (reduce + one-var-raw-data)\n                                         (count one-var-raw-data)))}\n     :correlations (for [correlation one-var-significant-correlations]\n                     {:many-var (many-var-type correlation)\n                      :regression-results (:regression-results correlation)})}))\n\n(defn make-all-correlations\n  {:malli/schema [:=> [:cat\n                       stats/PairwiseCorrelations\n                       proc/ProcessedRows\n                       :keyword\n                       :keyword]\n                  OneToManyCorrelation]}\n  [correlations csv-data one-var-type many-var-type]\n  ; [::pairwise-correlations keyword? keyword?\n  ;  => ::one-to-many-correlations]\n  (let [unique-one-vars (set (map #(one-var-type %) correlations))]\n    (into {} (for [one-var unique-one-vars]\n               [one-var (get-significant-correlations\n                          correlations one-var-type one-var many-var-type\n                          (mapv #(one-var %) csv-data))]))))\n\n(def table-keys [:correlation :p-value :datapoints])\n\n(>defn get-one-var-timeseries-data\n  [data]\n  [::one-to-many-correlation => :app.biomarker-data/timeseries-data]\n  (map #(select-keys % [:timestamp (:one-var data)])\n       (-> data\n           :correlations\n           first\n           :regression-results\n           :raw-data)))\n\n(>defn make-hiccup\n  \"Creates a table like this:\n           Input\n        Aggregate 1\n        Aggregate 2\n  Biomarker | r | p | n\n  data      | 0 | 0 | 0\n  ...\n  \"\n  [data]\n  [::one-to-many-correlation => :app.specs/hiccup]\n  (let [one-var (:one-var data)]\n    [:div\n      [:table\n        [:tbody\n    ;  https://www.w3schools.com/html/html_table_headers.asp\n         [:tr [:th {:colSpan 4}\n               [:a {:id one-var} one-var]\n               \", Counted score of \" (:score (:aggregates data))\n               \", Average value \" (:average (:aggregates data))]]\n         [:tr [:td {:colSpan 4}\n               (if (contains? biodata/data one-var)\n                 [:div\n                   (biodata/make-acm-plot\n                     (get-one-var-timeseries-data data)\n                     (one-var biodata/data))\n                   [:p (:notes (one-var biodata/data))]\n                   [:p \"Source: \" (:source (one-var biodata/data))]]\n                 \"No data found for this metric.\")]]\n         [:tr [:th \"Correlate\"]\n          (for [k (-> data\n                      :correlations\n                      first\n                      :regression-results\n                      (#(select-keys % table-keys))\n                      keys)]\n            [:th {:key (str k \"-head\")} k])]\n         (for [correlations (sort-by #(:correlation (:regression-results %))\n                                     (:correlations data))]\n           (let [mvar (name (:many-var correlations))]\n             [:tr {:key (str mvar \"-row\")} \n              [:td [ui/hover-to-render\n                    [:a {:href (str \"#\" mvar)} mvar]\n                    (:scatterplot (:regression-results correlations))]]\n              (for [[k v] (select-keys (:regression-results correlations)\n                                       table-keys)]\n                [:td {:key (str mvar \"-\" k)} v])]))]]]))\n"]}