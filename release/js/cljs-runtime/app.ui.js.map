{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["app.ui/value-to-str","value","cljs.core/map?","app.ui/map-to-sorted-pairs","m","cljs.core.sort_by","pair","k","cljs.core/first","cljs.core._EQ_","cljs.core/name","cljs.core/seq","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha.every_impl","G__62269","cljs.core/coll?","iter__4652__auto__","s__62271","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__62273","cljs.core/chunk-buffer","i__62272","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62270","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","s__62276","b__62278","i__62277","s__62283","b__62285","i__62284","iter__62282","iter__62275","s__62294","b__62296","i__62295","iter__62293","app.ui/maps-to-html","maps","sorted-pairs","cljs.core.map","cljs.core.into","pairs","r","cljs.core/peek","app.ui/hideable","_","hidden","reagent.core.atom","component","cljs.core/reset!","cljs.core/deref","cljs.core/not","app.ui/hover-to-render","hoverable","hidable","app.ui/cell-data","row","cell","map__62301","cljs.core/--destructure-map","cljs.core.get","path","expr","or__4253__auto__","and__4251__auto__","cljs.core.get_in","app.ui/cell-fn","render-info","row-num","col-num","map__62307","format","attrs","cljs.core/identity","data","content","app.ui/compare-vals","x","y","cljs.core/vector?","p1__62309#","p2__62308#","cljs.core.reduce","cljs.core/compare","cljs.core/second","cljs.core.not_EQ_","cljs.core/reduced","cljs.core/vector","cljs.core/boolean?","app.ui/sort-fn","rows","column-model","sorting","cljs.core.sort","row-x","row-y","sort","column","G__62321","direction","cell-x","cell-y","compared","app.ui/get-column-model","flattened-data","s__62323","b__62325","i__62324","iter__62322","cljs.core/keys","app.ui/reagent-table","data-atom","reagent-table.core/reagent-table","cljs.core/chunk-first"],"sourcesContent":["(ns app.ui\n  (:require\n   [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n   [reagent-table.core :as rt]\n   [reagent.core :as r]\n   [oz.core :as oz]\n   ; [\"react-data-grid\" :default DataGrid]\n   [cljs.spec.alpha :as s]))\n\n(defn value-to-str\n  \"Converts a given value into something displayable by an html tabl.\"\n  [value]\n  (cond\n    (map? value) \"{...}\"\n    :else value))\n\n; (value-to-str {:test \"map\"})\n\n; (defn maps-to-datagrid\n;   [maps]\n;   [(r/adapt-react-class DataGrid)\n;    {:columns (map #({:key % :name (name %)}) (keys (first maps)))\n;     :rows maps}])\n\n; Beware sorting maps directly - it's been unreliable.  It's better to convert\n; to lists of 2-vectors and sort those.\n(defn map-to-sorted-pairs [m]\n  (sort-by (fn [pair]\n             (let [k (first pair)]\n               ; Capital letters get sorted before lowercase!\n               (if (= k :input) \"AAAAA\" (name k))))\n           (seq m)))\n\n(>defn maps-to-html\n  \"Converts collection of maps like\n  [{:col1 val1 :col2 val2} {:col1 val3 :col2 val4}]\n  to an HTML table.\n  \n  See https://stackoverflow.com/a/33458370 for ^{:key} map explanation.\n  \"\n  [maps]\n  [(s/coll-of map?) => :app.specs/hiccup]\n  (let [sorted-pairs (map map-to-sorted-pairs maps)]\n    [:table\n     (into [:tbody\n            (into [:tr] (for [k (map first (first sorted-pairs))]\n                          [:th k]))]\n           (for [pairs sorted-pairs]\n             (into [:tr] (for [r (map peek pairs)]\n                           [:td (value-to-str r)]))))]))\n\n(defn hideable\n  \"Adds a clickable hide button to the component.\n\n  I would use a details/summary html element, but they don't seem to play\n  nicely with react/reagent :(.\n  \n  Can be used like this:\n  [hidable component-to-hide]\"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [component]\n      [:div\n        [:button {:on-click #(reset! hidden (not @hidden))}\n         \"Click to hide/show\"]\n        [:div {:style {:display (if @hidden \"none\" \"block\")}}\n         component]])))\n\n\n(defn hover-to-render\n  \"Wraps a component in a function that only shows and renders it when an\n  element is hovered.\n\n  Original inspiration:\n  https://www.reddit.com/r/Clojure/comments/sihk4b/comment/hv8xrh6/\n  \"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [hoverable hidable]\n      [:div\n        [:div {:on-mouse-over #(reset! hidden false)\n               :on-mouse-out #(reset! hidden true)}\n         hoverable]\n        (if @hidden\n          nil\n          [:div {:style {:position \"absolute\" :z-index 100}}\n           hidable])])))\n\n\n; --- Reagent Table Logic ---------------------------\n; See https://github.com/Frozenlock/reagent-table/blob/master/dev/reagent_table/dev.cljs\n\n(defn- cell-data\n  \"Resolve the data within a row for a specific column\"\n  [row cell]\n  (let [{:keys [path expr]} cell]\n    (or (and path\n             (get-in row path))\n        (and expr\n             (expr row)))))\n\n(defn- cell-fn\n  \"Return the cell hiccup form for rendering.\n   - render-info the specific column from :column-model\n   - row the current row\n   - row-num the row number\n   - col-num the column number in model coordinates\"\n  [render-info row row-num col-num]\n  (let [{:keys [format attrs]\n         :or   {format identity\n                attrs (fn [_] {})}} render-info\n        data    (cell-data row render-info)\n        content (format data)\n        attrs   (attrs data)]\n    [:span\n     attrs\n     content]))\n\n(defn compare-vals\n  \"A comparator that works for the various types found in table structures.\n  This is a limited implementation that expects the arguments to be of\n  the same type. The :else case is to call compare, which will throw\n  if the arguments are not comparable to each other or give undefined\n  results otherwise.\n  Both arguments can be a vector, in which case they must be of equal\n  length and each element is compared in turn.\"\n  [x y]\n  (cond\n    (and (vector? x)\n         (vector? y)\n         (= (count x) (count y)))\n    (reduce #(let [r (compare (first %2) (second %2))]\n               (if (not= r 0)\n                 (reduced r)\n                 r))\n            0\n            (map vector x y))\n\n    (or (and (number? x) (number? y))\n        (and (string? x) (string? y))\n        (and (boolean? x) (boolean? y)))\n    (compare x y)\n\n    :else ;; hope for the best... are there any other possiblities?\n    (compare x y)))\n\n(defn- sort-fn\n  \"Generic sort function for tabular data. Sort rows using data resolved from\n  the specified columns in the column model.\"\n  [rows column-model sorting]\n  (sort (fn [row-x row-y]\n          (reduce\n            (fn [_ sort]\n              (let [column (column-model (first sort))\n                    direction (second sort)\n                    cell-x (cell-data row-x column)\n                    cell-y (cell-data row-y column)\n                    compared (if (= direction :asc)\n                               (compare-vals cell-x cell-y)\n                               (compare-vals cell-y cell-x))]\n                (when-not (zero? compared)\n                  (reduced compared))))\n                \n            0\n            sorting))\n        rows))\n\n(defn- get-column-model\n  [flattened-data]\n  (into [] (for [k (keys (first flattened-data))]\n             {:path [k] :header (name k) :key k})))\n\n(defn reagent-table [data-atom]\n  [rt/reagent-table\n   data-atom\n   {:column-model (get-column-model @data-atom)\n    :render-cell cell-fn\n    :sort sort-fn}])\n"]}