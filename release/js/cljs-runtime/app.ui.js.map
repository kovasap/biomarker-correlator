{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["app.ui/px-per-character","app.ui/get-rough-px-width","string","cljs.core/count","app.ui/datagrid-column","k","vec__136644","cljs.core.nth","biomarker","stat","clojure.string.split","cljs.core/name","reagent.core.as_element","x__4336__auto__","y__4337__auto__","row","clj-row","cljs.core.js__GT_clj","pval-key","cljs.core.keyword","clojure.string.join","app.stats/p-value-cutoff","cljs.core/contains?","app.ui/maps-to-datagrid","maps","sorted-rows","reagent.core.atom","sort-columns","js/shadow.js.shim.module$react_data_grid.default","cljs.core/clj->js","cljs.core.map","cljs.core/keys","cljs.core/first","cljs.core/deref","newSortColumns","map__136648","cljs.core/--destructure-map","cljs.core.get","columnKey","direction","p1__136647#","cljs.core.swap_BANG_","cljs.core.sort","m1","m2","v1","v2","cljs.core._EQ_","app.csv/download-as-csv","cljs.core.prn","app.ui/value-to-str","value","cljs.core/map?","app.ui/map-to-sorted-pairs","m","cljs.core.sort_by","pair","cljs.core/seq","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha.every_impl","G__136650","cljs.core/coll?","iter__4652__auto__","s__136652","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__136654","cljs.core/chunk-buffer","i__136653","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__136651","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","s__136656","b__136658","i__136657","s__136660","b__136662","i__136661","iter__136659","iter__136655","s__136664","b__136666","i__136665","iter__136663","app.ui/maps-to-html","sorted-pairs","cljs.core.into","pairs","r","cljs.core/peek","app.ui/hideable","_","hidden","component","cljs.core/reset!","cljs.core/not","app.ui/hover-to-render","hoverable","hidable","app.ui/cell-data","cell","map__136672","path","expr","or__4253__auto__","and__4251__auto__","cljs.core.get_in","app.ui/cell-fn","render-info","row-num","col-num","map__136673","format","attrs","cljs.core/identity","data","content","app.ui/compare-vals","x","y","cljs.core/vector?","p1__136675#","p2__136674#","cljs.core.reduce","cljs.core/compare","cljs.core/second","cljs.core.not_EQ_","cljs.core/reduced","cljs.core/vector","cljs.core/boolean?","app.ui/sort-fn","rows","column-model","sorting","row-x","row-y","sort","column","G__136677","cell-x","cell-y","compared","app.ui/get-column-model","flattened-data","s__136680","b__136682","i__136681","iter__136679","app.ui/reagent-table","data-atom","reagent-table.core/reagent-table","cljs.core/chunk-first"],"sourcesContent":["(ns app.ui\n  (:require\n   [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n   [reagent-table.core :as rt]\n   [reagent.core :as r]\n   [\"react-data-grid\" :default DataGrid]\n   [app.csv :as csv]\n   [app.stats :as stats]\n   [clojure.string :as st]\n   [cljs.spec.alpha :as s]))\n\n\n(def px-per-character 13)\n(defn get-rough-px-width\n  \"Gives a rough estimate for the pixel width of a string.\"\n  [string]\n  (* px-per-character (count string)))\n\n(defn datagrid-column\n  [k]\n  (let [[biomarker stat] (st/split (name k) #\"\\-\\-\")]\n    {:key k\n     :name (r/as-element\n             [:div {:style {:line-height \"20px\"}} biomarker [:br] stat])\n     :sortable true\n     :width (max (get-rough-px-width biomarker) (get-rough-px-width stat))\n     :cellClass\n     (fn [row]\n       (let [clj-row (js->clj row :keywordize-keys true)\n             pval-key (keyword (st/join \"--\" [biomarker \"p-value\"]))]\n         (cond\n           (nil? (pval-key clj-row))\n           \"\"\n           (< (pval-key clj-row) stats/p-value-cutoff)\n           \"\"\n           :else\n           \"has-text-grey-lighter\")))\n     :frozen\n     (if (contains? #{:input :score} k)\n       true\n       false)}))\n\n(defn maps-to-datagrid\n  [maps]\n  (let [sorted-rows (r/atom maps)\n        sort-columns (r/atom [{:columnKey \"input\" :direction \"ASC\"}])]\n    [:div\n      [:> DataGrid\n       {:columns (clj->js (map datagrid-column (keys (first maps))))\n        ; This in combination with [role=columndheader] in public/css/site.css\n        ; allows for multiline column headers.\n        :headerRowHeight 60\n        :defaultColumnOptions #js {:sortable true\n                                   :resizable true}\n        ; See\n        ; https://github.com/adazzle/react-data-grid/blob/b7ad586498ab8a6ed3235ccfd93d3d490b24f4cc/website/demos/CommonFeatures.tsx#L330\n        ; for how to make column sorting work. See also\n        ; https://github.com/reagent-project/reagent/issues/545\n        :sortColumns (clj->js @sort-columns)\n        :onSortColumnsChange\n        (fn [newSortColumns]\n          (let [{columnKey :columnKey\n                 direction :direction} (first (js->clj newSortColumns\n                                                       :keywordize-keys true))]\n            (swap! sorted-rows\n                   #(sort (fn [m1 m2]\n                            (let [v1 (get columnKey m1)\n                                  v2 (get columnKey m2)]\n                              (if (= direction \"ASC\")\n                                (< v1 v2)\n                                (> v1 v2))))\n                          %))))\n        :rows (clj->js @sorted-rows)}]\n      [:button {:on-click #(csv/download-as-csv maps \"data.csv\")}\n       \"Download as CSV\"]]))\n\n(prn DataGrid)\n(maps-to-datagrid [{:test \"v1\" :test2 \"v2\"}])\n\n\n(defn value-to-str\n  \"Converts a given value into something displayable by an html tabl.\"\n  [value]\n  (cond\n    (map? value) \"{...}\"\n    :else value))\n\n; (value-to-str {:test \"map\"})\n\n; Beware sorting maps directly - it's been unreliable.  It's better to convert\n; to lists of 2-vectors and sort those.\n(defn map-to-sorted-pairs [m]\n  (sort-by (fn [pair]\n             (let [k (first pair)]\n               ; Capital letters get sorted before lowercase!\n               (if (= k :input) \"AAAAA\" (name k))))\n           (seq m)))\n\n(>defn maps-to-html\n  \"Converts collection of maps like\n  [{:col1 val1 :col2 val2} {:col1 val3 :col2 val4}]\n  to an HTML table.\n  \n  See https://stackoverflow.com/a/33458370 for ^{:key} map explanation.\n  \"\n  [maps]\n  [(s/coll-of map?) => :app.specs/hiccup]\n  (let [sorted-pairs (map map-to-sorted-pairs maps)]\n    [:table\n     (into [:tbody\n            (into [:tr] (for [k (map first (first sorted-pairs))]\n                          [:th k]))]\n           (for [pairs sorted-pairs]\n             (into [:tr] (for [r (map peek pairs)]\n                           [:td (value-to-str r)]))))]))\n\n(defn hideable\n  \"Adds a clickable hide button to the component.\n\n  I would use a details/summary html element, but they don't seem to play\n  nicely with react/reagent :(.\n  \n  Can be used like this:\n  [hidable component-to-hide]\"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [component]\n      [:div\n        [:button {:on-click #(reset! hidden (not @hidden))}\n         \"Click to hide/show\"]\n        [:div {:style {:display (if @hidden \"none\" \"block\")}}\n         component]])))\n\n\n(defn hover-to-render\n  \"Wraps a component in a function that only shows and renders it when an\n  element is hovered.\n\n  Original inspiration:\n  https://www.reddit.com/r/Clojure/comments/sihk4b/comment/hv8xrh6/\n  \"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [hoverable hidable]\n      [:div\n        [:div {:on-mouse-over #(reset! hidden false)\n               :on-mouse-out #(reset! hidden true)}\n         hoverable]\n        (if @hidden\n          nil\n          [:div {:style {:position \"absolute\" :z-index 100}}\n           hidable])])))\n\n\n; --- Reagent Table Logic ---------------------------\n; See https://github.com/Frozenlock/reagent-table/blob/master/dev/reagent_table/dev.cljs\n\n(defn- cell-data\n  \"Resolve the data within a row for a specific column\"\n  [row cell]\n  (let [{:keys [path expr]} cell]\n    (or (and path\n             (get-in row path))\n        (and expr\n             (expr row)))))\n\n(defn- cell-fn\n  \"Return the cell hiccup form for rendering.\n   - render-info the specific column from :column-model\n   - row the current row\n   - row-num the row number\n   - col-num the column number in model coordinates\"\n  [render-info row row-num col-num]\n  (let [{:keys [format attrs]\n         :or   {format identity\n                attrs (fn [_] {})}} render-info\n        data    (cell-data row render-info)\n        content (format data)\n        attrs   (attrs data)]\n    [:span\n     attrs\n     content]))\n\n(defn compare-vals\n  \"A comparator that works for the various types found in table structures.\n  This is a limited implementation that expects the arguments to be of\n  the same type. The :else case is to call compare, which will throw\n  if the arguments are not comparable to each other or give undefined\n  results otherwise.\n  Both arguments can be a vector, in which case they must be of equal\n  length and each element is compared in turn.\"\n  [x y]\n  (cond\n    (and (vector? x)\n         (vector? y)\n         (= (count x) (count y)))\n    (reduce #(let [r (compare (first %2) (second %2))]\n               (if (not= r 0)\n                 (reduced r)\n                 r))\n            0\n            (map vector x y))\n\n    (or (and (number? x) (number? y))\n        (and (string? x) (string? y))\n        (and (boolean? x) (boolean? y)))\n    (compare x y)\n\n    :else ;; hope for the best... are there any other possiblities?\n    (compare x y)))\n\n(defn- sort-fn\n  \"Generic sort function for tabular data. Sort rows using data resolved from\n  the specified columns in the column model.\"\n  [rows column-model sorting]\n  (sort (fn [row-x row-y]\n          (reduce\n            (fn [_ sort]\n              (let [column (column-model (first sort))\n                    direction (second sort)\n                    cell-x (cell-data row-x column)\n                    cell-y (cell-data row-y column)\n                    compared (if (= direction :asc)\n                               (compare-vals cell-x cell-y)\n                               (compare-vals cell-y cell-x))]\n                (when-not (zero? compared)\n                  (reduced compared))))\n                \n            0\n            sorting))\n        rows))\n\n(defn- get-column-model\n  [flattened-data]\n  (into [] (for [k (keys (first flattened-data))]\n             {:path [k] :header (name k) :key k})))\n\n(defn reagent-table [data-atom]\n  [rt/reagent-table\n   data-atom\n   {:column-model (get-column-model @data-atom)\n    :render-cell cell-fn\n    :sort sort-fn}])\n"]}