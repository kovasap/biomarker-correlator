{"version":3,"sources":["app/ui.cljs"],"mappings":";AAYA,0BAAA,1BAAKA;AACL;;;4BAAA,5BAAMC,gEAEHC;AAFH,AAGE,QAAGF,0BAAiB,AAACG,gBAAMD;;AAE7B;;;;;;8BAAA,9BAAME,oEAKHC;AALH,AAME,IAAMC,QAAM,qEAAA,rEAACC,mDAAS,AAACC,eAAKH;AAA5B,AAAA,kDAAA,sDAAA,q1BAAA,6DAAA,KAAA,z5BACQA,uDACC,AAACI,sDACC,6CAAA,7CAACC,8EAAQ,+CAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,mEAAA,rYAACC,oaAEC,AAACC,mDAAWN,MAAM,+CAAA,mFAAA,lIAACO,wTAE/B,AAACC,8CAAMC,cAAI,AAACC,4CAAIf,0BAAmBK;;AAE/C,AAAA,0BAAA,kCAAAW,5DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,+DAAA,gBAAAG,/EAAMD,0EACHU;AADH,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;kCAAA,AAAAE,4CAAAF,eAAA,zFACkBS,4LAC0B,WAAKC;AAAL,AAAA;;AAF5C,AAKE,IAAMC,cAAY,AAACC,gDAAOJ;IACpBK,eAAa,gDAAA,mFAAA,2CAAA,+DAAA,QAAA,+DAAA,pTAACD;AADpB,AAAA,0FAAA,mDAAA,mFAAA,6FAAA,2CAAA,zFAGQE,oJACO,AAACC,qBAAQ,4CAAA,WAAAC,vDAACzB;AAAD,AAAM,OAAC0B,uGAAM,4BAAAD,5BAACrC,8CACD,uHAAAqC,0DAAAA,hLAACP,4DAAAA,8EAAAA;2CALtC,2EAAA,KAAA,qFAAA,cAAA,mBAAA,OAAA,sHAAA,3WAM6B,AAACS,eAAK,AAACb,gBAAMG,wRAUvB,qBAAA,AAAAW,rBAACJ,qCAASF,kGAEvB,WAAKO;AAAL,AACE,IAAAC,aAC6B,AAAChB,gBAAM,2HAAA,2EAAA,tMAACmB,0DAAQJ;IAD7CC,iBAAA,AAAApB,4BAAAoB;gBAAA,AAAAnB,4CAAAmB,eAAA,vEAAOC;gBAAP,AAAApB,4CAAAmB,eAAA,vEACOE;AADP,AAGE,sEAAA,WAAAE,1EAACC,mDAAMf;AAAP,AACQ,OAACgB,6CAAK,WAAKC,GAAGC;AAAR,AACE,IAAMC,KAAG,AAAC5B,4CAAIoB,UAAUM;IAClBG,KAAG,AAAC7B,4CAAIoB,UAAUO;AADxB,AAEE,GAAI,uDAAA,vDAACG,6CAAET;AACL,QAAGO,KAAGC;;AACN,QAAGD,KAAGC;;GALlBN;;GAvBlB,uHAAA,mFAAA,yDAAA,2CAAA,6DAAA,vTA8BY,qBAAA,AAAAN,rBAACJ,qCAASJ;AA9BtB,AA+ByB,oCAAA,7BAACsB,wBAAoBzB;WA/B9C;;;AALF,CAAA,kDAAA,lDAAMV;;AAAN;AAAA,CAAA,4CAAA,WAAAK,vDAAML;AAAN,AAAA,IAAAM,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAuCA,wBAAA,mFAAA,2CAAA,oDAAA,KAAA,uDAAA,tQAACL;AAGD;;;sBAAA,tBAAMoC,oDAEHC;AAFH,AAGE,GACE,AAACC,qBAAKD;AADR;;AAAA,AAEQA;;;;AAMV,6BAAA,7BAAME,kEAAqBC;AAA3B,AACE,OAACC,gDAAQ,WAAKC;AAAL,AACE,IAAM5D,IAAE,AAACyB,gBAAMmC;AAAf,AAEE,GAAI,+CAAA,/CAACR,6CAAEpD;AAAP;;AAAyB,OAACG,eAAKH;;GACnC,AAAC6D,cAAIH;;AAEhB,AAAA,AAAAI,yBAAA,AAAA,qFAAA,AAAA,4mBAAA,AAAAC,2BAAA,AAAAC,wDAAA,AAAA,kVAAA,AAAAC,yBAAA,mFAAA,8DAAA,mFAAA,AAAAC,yDAAA,AAAA,+EAAA,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAC,jQAQcX;AARd,AAAA,OAAAY,sBAAAD;GAAA,8FAAA,KAAA,0FAAA,AAAA,+LAAA,cAAA,AAAA,mRAAA,KAAA,MAAA,AAAA,kVAAA,AAAAH,wDAAA,AAAA,yEAAA,yEAAA,KAAA,MAAA,AAAA,yEAAA,KAAA,AAAA,KAAA;;AAAA;;;;;;;;;sBAAA,tBAAOmC,oDAOJvE;AAPH,AAAA,mBAAA,fASQwE,eAAczF,4CAAI8C,2BAAoB7B;AAT9C,AAAA,0FAAA,uDAAA,6CAAA,mFAAA,sDAAA,6CAAA,mFAAA,0DAAA,iBAAAyC,qBAAA,4CAAAC,lcAWMjE,sLACOA;AAZb,AAAA,YAAAkE,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAX,cAAAS;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAi2EmD,AAAA2F,sBAAA/F;IAj2EnDK,qBAAA,AAAA7E,gBAAA4E;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,QAAA,AAAAI,eAAAL,gBAAAI,nCAY8B9E;AAZ9B,AAAA,AAAA,AAAAgF,uBAAAJ,SAAA,mFAAA,iDAa+B5E;;AAb/B,eAAA,CAAA8E,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,kCAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAnD,gBAAA6C,pBAY8BtE;AAZ9B,AAAA,OAAAqF,eAAA,mFAAA,2DAAA,AAAAF,kCAAA,AAAAG,eAAAhB,3DAa+BtE;;;AAb/B;;;;GAAA,KAAA;;AAAA,AAAA,OAAAqE,mBAAA,4DAAA,5DAYiC1D,4CAAIc,gBAAOA,gBAAM2E;cAZlD,iBAAA/B,qBAAA,4CAAAkB;AAAA,AAAA,YAAAhB,kBAAA,KAAA;AAAA,AAAA,IAAAgB,eAAAA;;AAAA,AAAA,IAAAf,qBAAA,AAAAX,cAAA0B;AAAA,AAAA,GAAAf;AAAA,AAAA,IAAAe,eAAAf;AAAA,AAAA,GAAA,AAAAC,6BAAAc;AAAA,IAAAb,kBAi2EmD,AAAA2F,sBAAA9E;IAj2EnDZ,qBAAA,AAAA7E,gBAAA4E;IAAAc,WAAA,AAAAX,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAc,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAd;AAAA,YAAA,AAAAI,eAAAL,gBAAAe,vCAciBY;AAdjB,AAAA,AAAA,AAAArB,uBAAAQ,SAAA,6CAAA,mFAAA,0DAAA,iBAAAnB,qBAAA,hOAechE;iEAfdqF;AAAA,AAAA,YAAAnB,kBAAA,KAAA;;AAAA,AAAA,IAAAmB,eAAAA;;AAAA,AAAA,IAAAlB,yBAAA,AAAAX,cAAA6B;AAAA,AAAA,GAAAlB;AAAA,AAAA,IAAAkB,eAAAlB;AAAA,AAAA,GAAA,AAAAC,6BAAAiB;AAAA,IAAAhB,sBAi2EmD,AAAA2F,sBAAA3E;IAj2EnDf,yBAAA,AAAA7E,gBAAA4E;IAAAiB,WAAA,AAAAd,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAiB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjB;AAAA,QAAA,AAAAI,eAAAL,oBAAAkB,vCAe+BU;AAf/B,AAAA,AAAA,AAAAtB,uBAAAW,SAAA,mFAAA,iDAAA,AAgBiCrC,oBAAagD;;AAhB9C,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAS,UAAA,AAAAE,gDAAA,AAAAT,qBAAAM;;AAAA,OAAAT,qBAAA,AAAAC,gBAAAS,UAAA;;;AAAA,QAAA,AAAAlE,gBAAAiE,pBAe+BY;AAf/B,AAAA,OAAAjB,eAAA,mFAAA,iDAAA,+BAAA,AAAAQ,gDAAA,AAAAP,eAAAI,9FAgBiCpC,oBAAagD;;;AAhB9C;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAjC,mBAAA,AAekC1D,4CAAI4F,eAAKF;;;AAf3C,eAAA,CAAAZ,WAAA;;;;AAAA;;;;;AAAA,OAAAR,qBAAA,AAAAC,gBAAAM,UAAA,AAAAM,kCAAA,AAAAV,qBAAAG;;AAAA,OAAAN,qBAAA,AAAAC,gBAAAM,UAAA;;;AAAA,YAAA,AAAA/D,gBAAA8D,xBAciBc;AAdjB,AAAA,OAAAhB,eAAA,6CAAA,mFAAA,0DAAA,iBAAAhB,qBAAA,hOAechE;iEAfd0F;AAAA,AAAA,YAAAxB,kBAAA,KAAA;AAAA,AAAA,IAAAwB,eAAAA;;AAAA,AAAA,IAAAvB,yBAAA,AAAAX,cAAAkC;AAAA,AAAA,GAAAvB;AAAA,AAAA,IAAAuB,eAAAvB;AAAA,AAAA,GAAA,AAAAC,6BAAAsB;AAAA,IAAArB,kBAi2EmD,AAAA2F,sBAAAtE;IAj2EnDpB,qBAAA,AAAA7E,gBAAA4E;IAAAsB,WAAA,AAAAnB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAsB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAtB;AAAA,QAAA,AAAAI,eAAAL,gBAAAuB,nCAe+BK;AAf/B,AAAA,AAAA,AAAAtB,uBAAAgB,SAAA,mFAAA,iDAAA,AAgBiC1C,oBAAagD;;AAhB9C,eAAA,CAAAL,WAAA;;;;AAAA;;;;;AAAA,OAAAhB,qBAAA,AAAAC,gBAAAc,UAAA,AAAAE,gDAAA,AAAAd,qBAAAW;;AAAA,OAAAd,qBAAA,AAAAC,gBAAAc,UAAA;;;AAAA,QAAA,AAAAvE,gBAAAsE,pBAe+BO;AAf/B,AAAA,OAAAjB,eAAA,mFAAA,iDAAA,+BAAA,AAAAa,gDAAA,AAAAZ,eAAAS,9FAgBiCzC,oBAAagD;;;AAhB9C;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAjC,mBAAA,AAekC1D,4CAAI4F,eAAKF;MAf3C,AAAAP,kCAAA,AAAAR,eAAAC;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAlB,mBAcuB+B;;;AAIvB;;;;;;;;;kBAAA,lBAAMI,4CAQH1E;AARH,AASE,IAAM2E,SAAO,gDAAA,hDAACzE;AAAd,AACE,kBAAK0E;AAAL,AAAA,0FAAA,mDAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAEyB,OAACC,sBAAOF,OAAO,cAAA,AAAAlE,dAACqE,8BAAKH;WAF9C,6BAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAI4B,kBAAA,AAAAlE,yBAAA,OAAA,hBAAKkE,yCAC5BC;;;AAGT;;;;;;;;yBAAA,zBAAMG,0DAOH/E;AAPH,AAQE,IAAM2E,SAAO,gDAAA,hDAACzE;AAAd,AACE,kBAAK8E,UAAUC;AAAf,AAAA,0FAAA,mDAAA,mFAAA,mDAAA,2CAAA,uEAAA;AAAA,AAE2B,oCAAA,7BAACJ,sBAAOF;GAFnC,oEAAA;AAAA,AAG0B,oCAAA,7BAACE,sBAAOF;WAC7BK,kBACD,kBAAA,AAAAvE,yBAAA,KAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,8DAAA,WAAA,2DAAA,raAAKkE,2bAGFM;;;AAMX;;;mBAAA,nBAAOC,8CAEJC,IAAIC;AAFP,AAGE,IAAAC,aAA0BD;IAA1BC,iBAAA,AAAA9F,4BAAA8F;WAAA,AAAA7F,4CAAA6F,eAAA,lEAAcC;WAAd,AAAA9F,4CAAA6F,eAAA,lEAAmBE;AAAnB,AACE,IAAAC,mBAAI,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AACK,OAACC,+CAAOP,IAAIG;;AADjBG;;;AAAJ,AAAA,oBAAAD;AAAAA;;AAEI,IAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AACK,QAACF,qCAAAA,0CAAAA,PAAKJ,sBAAAA;;AADXM;;;;AAGR;;;;;;;iBAAA,jBAAOE,0CAMJC,YAAYT,IAAIU,QAAQC;AAN3B,AAOE,IAAAC,aAEkCH;IAFlCG,iBAAA,AAAAxG,4BAAAwG;aAAA,AAAAvG,4CAAAuG,eAAA,pEAAcC,8HACOE;YADrB,AAAA1G,4CAAAuG,eAAA,nEAAqBE,2HAED,WAAKjG;AAAL,AAAA;;IACdmG,OAAQ,AAACjB,iBAAUC,IAAIS;IACvBQ,UAAQ,CAACJ,uCAAAA,6CAAAA,RAAOG,yBAAAA;IAChBF,YAAQ,CAACA,sCAAAA,4CAAAA,RAAME,wBAAAA;AALrB,AAAA,0FAAA,qDAOGF,UACAG;;AAEL;;;;;;;;;sBAAA,tBAAMC,oDAQHC,EAAEC;AARL,AASE,GACE,kCAAA,hCAAK,AAACC,wBAAQF,UACT,AAACE,wBAAQD,QACT,AAACjF,6CAAE,AAACtD,gBAAMsI,GAAG,AAACtI,gBAAMuI;AACzB,sDAAA,WAAAE,iBAAAC,3EAACC;AAAD,AAAS,IAAMnC,IAAE,AAACoC,kBAAQ,gBAAAF,hBAAC/G,kCAAU,iBAAA+G,jBAACG;AAA7B,AACE,GAAI,kDAAA,lDAACC,gDAAKtC;AACR,OAACuC,kBAAQvC;;AACTA;;GAHb,IAKQ,AAAC3F,4CAAImI,iBAAOV,EAAEC;;AATxB,GAWE,4DAAA,1DAAI,EAAK,OAASD,oBAAG,OAASC,wBAC1B,EAAK,OAASD,oBAAG,OAASC,sBAC1B,EAAK,AAACU,yBAASX,QAAG,AAACW,yBAASV;AAChC,OAACK,kBAAQN,EAAEC;;AAdb,AAiBE,OAACK,kBAAQN,EAAEC;;;;;AAEf;;;;iBAAA,jBAAOW,0CAGJC,KAAKC,aAAaC;AAHrB,AAIE,OAACpG,6CAAK,WAAKqG,MAAMC;AAAX,AACE,OAACZ,+CACC,WAAK3G,EAAEwH;AAAP,AACE,IAAMC,SAAO,iBAAAC,WAAc,AAAC/H,gBAAM6H;AAArB,AAAA,gGAAAE,mCAAAA,3HAACN,6CAAAA,uDAAAA;;IACRvG,YAAU,AAACgG,iBAAOW;IAClBG,SAAO,AAACzC,iBAAUoC,MAAMG;IACxBG,SAAO,AAAC1C,iBAAUqC,MAAME;IACxBI,WAAS,EAAI,uDAAA,vDAACvG,6CAAET,8DACL,AAACwF,oBAAasB,OAAOC,QACrB,AAACvB,oBAAauB,OAAOD;AANtC,AAOE,GAAU,cAAA,bAAOE;AAAjB;;AAAA,AACE,OAACd,kBAAQc;;GAVjB,IAaER;GACJF;;AAER,0BAAA,1BAAOW,4DACJC;AADH,AAEE,oDAAA,7CAACxJ,8EAAQ,iBAAAgE,qBAAA,gDAAAyF;AAAA,AAAA,YAAAvF,kBAAA,KAAA;AAAA,AAAA,IAAAuF,eAAAA;;AAAA,AAAA,IAAAtF,qBAAA,AAAAX,cAAAiG;AAAA,AAAA,GAAAtF;AAAA,AAAA,IAAAsF,eAAAtF;AAAA,AAAA,GAAA,AAAAC,6BAAAqF;AAAA,IAAApF,kBAytEwC,AAAA2F,sBAAAP;IAztExCnF,qBAAA,AAAA7E,gBAAA4E;IAAAqF,WAAA,AAAAlF,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAqF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAArF;AAAA,QAAA,AAAAI,eAAAL,gBAAAsF,nCAAMhK;AAAN,AAAA,AAAA,AAAAgF,uBAAA+E,SAAA,2CAAA,qDAAA,6FAAA,0EAAA,pFACU/J,kEAAW,AAACG,eAAKH,uDAAQA;;AADnC,eAAA,CAAAgK,WAAA;;;;AAAA;;;;;AAAA,OAAA/E,qBAAA,AAAAC,gBAAA6E,UAAA,AAAAE,sCAAA,AAAA7E,qBAAA0E;;AAAA,OAAA7E,qBAAA,AAAAC,gBAAA6E,UAAA;;;AAAA,QAAA,AAAAtI,gBAAAqI,pBAAM9J;AAAN,AAAA,OAAAqF,eAAA,2CAAA,qDAAA,6FAAA,0EAAA,8DAAA,AAAA4E,sCAAA,AAAA3E,eAAAwE,vMACU9J,kEAAW,AAACG,eAAKH,uDAAQA;;;AADnC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAqE,mBAAQ,AAAC/B,eAAK,AAACb,gBAAMoI;;;AAGhC,uBAAA,vBAAMK,sDAAeC;AAArB,AAAA,qIAAA,2CAAA,yHAAA,kFAAA,jSACGC,iCACAD,0HACe,wBAAA,AAAA5H,xBAACqH,wCAAkBO,+EACpB1C,mEACPuB","names":["app.ui/px-per-character","app.ui/get-rough-px-width","string","cljs.core/count","app.ui/make-datagrid-column","k","lines","clojure.string.split","cljs.core/name","reagent.core.as_element","cljs.core.into","cljs.core.concat","cljs.core.interleave","cljs.core.repeat","cljs.core.apply","cljs.core/max","cljs.core.map","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.ui/maps-to-datagrid","p__55398","map__55399","cljs.core/--destructure-map","cljs.core.get","seq55392","G__55393","cljs.core/first","cljs.core/next","self__4851__auto__","maps","custom-make-datagrid-column","_","sorted-rows","reagent.core.atom","sort-columns","js/shadow.js.shim.module$react_data_grid.default","cljs.core/clj->js","p1__55390#","cljs.core.merge","cljs.core/keys","cljs.core/deref","newSortColumns","map__55405","columnKey","direction","cljs.core.js__GT_clj","p1__55391#","cljs.core.swap_BANG_","cljs.core.sort","m1","m2","v1","v2","cljs.core._EQ_","app.csv/download-as-csv","app.ui/value-to-str","value","cljs.core/map?","app.ui/map-to-sorted-pairs","m","cljs.core.sort_by","pair","cljs.core/seq","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha.every_impl","G__55453","cljs.core/coll?","iter__4652__auto__","s__55456","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__55458","cljs.core/chunk-buffer","i__55457","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55455","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","s__55460","b__55462","i__55461","s__55469","b__55471","i__55470","iter__55468","iter__55459","s__55473","b__55475","i__55474","iter__55472","app.ui/maps-to-html","sorted-pairs","pairs","r","cljs.core/peek","app.ui/hideable","hidden","component","cljs.core/reset!","cljs.core/not","app.ui/hover-to-render","hoverable","hidable","app.ui/cell-data","row","cell","map__55484","path","expr","or__4253__auto__","and__4251__auto__","cljs.core.get_in","app.ui/cell-fn","render-info","row-num","col-num","map__55485","format","attrs","cljs.core/identity","data","content","app.ui/compare-vals","x","y","cljs.core/vector?","p1__55487#","p2__55486#","cljs.core.reduce","cljs.core/compare","cljs.core/second","cljs.core.not_EQ_","cljs.core/reduced","cljs.core/vector","cljs.core/boolean?","app.ui/sort-fn","rows","column-model","sorting","row-x","row-y","sort","column","G__55492","cell-x","cell-y","compared","app.ui/get-column-model","flattened-data","s__55494","b__55496","i__55495","iter__55493","app.ui/reagent-table","data-atom","reagent-table.core/reagent-table","cljs.core/chunk-first"],"sourcesContent":["(ns app.ui\n  (:require\n    [app.specs]\n    [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n    [reagent-table.core :as rt]\n    [reagent.core :as r]\n    [\"react-data-grid\" :default DataGrid]\n    [app.csv :as csv]\n    [clojure.string :as st]\n    [cljs.spec.alpha :as s]))\n\n\n(def px-per-character 13)\n(defn get-rough-px-width\n  \"Gives a rough estimate for the pixel width of a string.\"\n  [string]\n  (* px-per-character (count string)))\n\n(defn make-datagrid-column\n  \"Generates a react-data-grid column \n  https://github.com/adazzle/react-data-grid/blob/929911c506919e96bd12e48ea5de68ec9511ca10/src/types.ts#L7\n  \n  '--' substrings in the input key are converted to newlines.\"\n  [k]\n  (let [lines (st/split (name k) #\"\\-\\-\")]\n    {:key k\n     :name (r/as-element\n             (into [] (concat\n                        [:div {:style {:line-height \"20px\"}}]\n                        (interleave lines (repeat [:br])))))\n     :sortable true\n     :width (apply max (map get-rough-px-width lines))})) \n\n(defn maps-to-datagrid\n  [maps & {:keys [custom-make-datagrid-column]\n           :or {custom-make-datagrid-column (fn [_] {})}}]\n  ; Not sure how to use ghostwheel with keyed args\n  ; [:app.specs/maps => :app.specs/hiccup]\n  (let [sorted-rows (r/atom maps)\n        sort-columns (r/atom [{:columnKey \"input\" :direction \"ASC\"}])]\n    [:div\n      [:> DataGrid\n       {:columns (clj->js (map #(merge (make-datagrid-column %)\n                                       (custom-make-datagrid-column %))\n                               (keys (first maps))))\n        ; This in combination with [role=columndheader] in public/css/site.css\n        ; allows for multiline column headers.\n        :headerRowHeight 60\n        :defaultColumnOptions #js {:sortable true\n                                   :resizable true}\n        ; See\n        ; https://github.com/adazzle/react-data-grid/blob/b7ad586498ab8a6ed3235ccfd93d3d490b24f4cc/website/demos/CommonFeatures.tsx#L330\n        ; for how to make column sorting work. See also\n        ; https://github.com/reagent-project/reagent/issues/545\n        :sortColumns (clj->js @sort-columns)\n        :onSortColumnsChange\n        (fn [newSortColumns]\n          (let [{columnKey :columnKey\n                 direction :direction} (first (js->clj newSortColumns\n                                                       :keywordize-keys true))]\n            (swap! sorted-rows\n                   #(sort (fn [m1 m2]\n                            (let [v1 (get columnKey m1)\n                                  v2 (get columnKey m2)]\n                              (if (= direction \"ASC\")\n                                (< v1 v2)\n                                (> v1 v2))))\n                          %))))\n        :rows (clj->js @sorted-rows)}]\n      [:button {:on-click #(csv/download-as-csv maps \"data.csv\")}\n       \"Download as CSV\"]]))\n\n(maps-to-datagrid [{:test \"v1\" :test2 \"v2\"}])\n\n\n(defn value-to-str\n  \"Converts a given value into something displayable by an html tabl.\"\n  [value]\n  (cond\n    (map? value) \"{...}\"\n    :else value))\n\n; (value-to-str {:test \"map\"})\n\n; Beware sorting maps directly - it's been unreliable.  It's better to convert\n; to lists of 2-vectors and sort those.\n(defn map-to-sorted-pairs [m]\n  (sort-by (fn [pair]\n             (let [k (first pair)]\n               ; Capital letters get sorted before lowercase!\n               (if (= k :input) \"AAAAA\" (name k))))\n           (seq m)))\n\n(>defn maps-to-html\n  \"Converts collection of maps like\n  [{:col1 val1 :col2 val2} {:col1 val3 :col2 val4}]\n  to an HTML table.\n  \n  See https://stackoverflow.com/a/33458370 for ^{:key} map explanation.\n  \"\n  [maps]\n  [(s/coll-of map?) => :app.specs/hiccup]\n  (let [sorted-pairs (map map-to-sorted-pairs maps)]\n    [:table\n     (into [:tbody\n            (into [:tr] (for [k (map first (first sorted-pairs))]\n                          [:th k]))]\n           (for [pairs sorted-pairs]\n             (into [:tr] (for [r (map peek pairs)]\n                           [:td (value-to-str r)]))))]))\n\n(defn hideable\n  \"Adds a clickable hide button to the component.\n\n  I would use a details/summary html element, but they don't seem to play\n  nicely with react/reagent :(.\n  \n  Can be used like this:\n  [hidable component-to-hide]\"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [component]\n      [:div\n        [:button {:on-click #(reset! hidden (not @hidden))}\n         \"Click to hide/show\"]\n        [:div {:style {:display (if @hidden \"none\" \"block\")}}\n         component]])))\n\n\n(defn hover-to-render\n  \"Wraps a component in a function that only shows and renders it when an\n  element is hovered.\n\n  Original inspiration:\n  https://www.reddit.com/r/Clojure/comments/sihk4b/comment/hv8xrh6/\n  \"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [hoverable hidable]\n      [:div\n        [:div {:on-mouse-over #(reset! hidden false)\n               :on-mouse-out #(reset! hidden true)}\n         hoverable]\n        (if @hidden\n          nil\n          [:div {:style {:position \"absolute\" :z-index 100}}\n           hidable])])))\n\n\n; --- Reagent Table Logic ---------------------------\n; See https://github.com/Frozenlock/reagent-table/blob/master/dev/reagent_table/dev.cljs\n\n(defn- cell-data\n  \"Resolve the data within a row for a specific column\"\n  [row cell]\n  (let [{:keys [path expr]} cell]\n    (or (and path\n             (get-in row path))\n        (and expr\n             (expr row)))))\n\n(defn- cell-fn\n  \"Return the cell hiccup form for rendering.\n   - render-info the specific column from :column-model\n   - row the current row\n   - row-num the row number\n   - col-num the column number in model coordinates\"\n  [render-info row row-num col-num]\n  (let [{:keys [format attrs]\n         :or   {format identity\n                attrs (fn [_] {})}} render-info\n        data    (cell-data row render-info)\n        content (format data)\n        attrs   (attrs data)]\n    [:span\n     attrs\n     content]))\n\n(defn compare-vals\n  \"A comparator that works for the various types found in table structures.\n  This is a limited implementation that expects the arguments to be of\n  the same type. The :else case is to call compare, which will throw\n  if the arguments are not comparable to each other or give undefined\n  results otherwise.\n  Both arguments can be a vector, in which case they must be of equal\n  length and each element is compared in turn.\"\n  [x y]\n  (cond\n    (and (vector? x)\n         (vector? y)\n         (= (count x) (count y)))\n    (reduce #(let [r (compare (first %2) (second %2))]\n               (if (not= r 0)\n                 (reduced r)\n                 r))\n            0\n            (map vector x y))\n\n    (or (and (number? x) (number? y))\n        (and (string? x) (string? y))\n        (and (boolean? x) (boolean? y)))\n    (compare x y)\n\n    :else ;; hope for the best... are there any other possiblities?\n    (compare x y)))\n\n(defn- sort-fn\n  \"Generic sort function for tabular data. Sort rows using data resolved from\n  the specified columns in the column model.\"\n  [rows column-model sorting]\n  (sort (fn [row-x row-y]\n          (reduce\n            (fn [_ sort]\n              (let [column (column-model (first sort))\n                    direction (second sort)\n                    cell-x (cell-data row-x column)\n                    cell-y (cell-data row-y column)\n                    compared (if (= direction :asc)\n                               (compare-vals cell-x cell-y)\n                               (compare-vals cell-y cell-x))]\n                (when-not (zero? compared)\n                  (reduced compared))))\n                \n            0\n            sorting))\n        rows))\n\n(defn- get-column-model\n  [flattened-data]\n  (into [] (for [k (keys (first flattened-data))]\n             {:path [k] :header (name k) :key k})))\n\n(defn reagent-table [data-atom]\n  [rt/reagent-table\n   data-atom\n   {:column-model (get-column-model @data-atom)\n    :render-cell cell-fn\n    :sort sort-fn}])\n"]}