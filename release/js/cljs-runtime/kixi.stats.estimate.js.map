{"version":3,"sources":["kixi/stats/estimate.cljc"],"mappings":"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","names":["p__42970","map__42971","cljs.core/--destructure-map","cljs.core.get","kixi.stats.estimate/simple-linear-regression","x-bar","y-bar","ss-x","ss-xy","sum-squares","slope","offset","js/kixi","js/kixi.stats","js/kixi.stats.estimate","js/kixi.stats.estimate.t_kixi$stats$estimate42972","kixi.stats.estimate/t_kixi$stats$estimate42972","_42974","meta42973","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","kixi.stats.estimate/->t_kixi$stats$estimate42972","_","x","p__43021","map__43022","kixi.stats.estimate/regression-standard-error","n","ss-y","kixi.stats.math/sqrt","kixi.stats.math/sq","p__43031","map__43032","kixi.stats.estimate/regression-confidence-interval","alpha","regression","y-hat","kixi.stats.protocols/measure","se","df","t-crit","kixi.stats.distribution.critical_value","kixi.stats.distribution/t","err","js/kixi.stats.estimate.t_kixi$stats$estimate43034","kixi.stats.estimate/t_kixi$stats$estimate43034","_43036","meta43035","kixi.stats.estimate/->t_kixi$stats$estimate43034","p__43053","map__43054","kixi.stats.estimate/regression-prediction-standard-error","p__43059","map__43060","kixi.stats.estimate/regression-prediction-interval","js/kixi.stats.estimate.t_kixi$stats$estimate43061","kixi.stats.estimate/t_kixi$stats$estimate43061","_43063","meta43062","kixi.stats.estimate/->t_kixi$stats$estimate43061"],"sourcesContent":["(ns kixi.stats.estimate\n  (:require [kixi.stats.distribution :as d]\n            [kixi.stats.math :refer [sq sqrt]]\n            [kixi.stats.protocols :as p]))\n\n(defn simple-linear-regression\n  [{:keys [x-bar y-bar ss-x ss-xy] :as sum-squares}]\n  (when-not (zero? ss-x)\n    (let [slope (/ ss-xy ss-x)\n          offset (- y-bar (* x-bar slope))]\n      (reify\n        p/PDependent\n        (measure [_ x]\n          (+ offset (* slope x)))\n        p/PParameterised\n        (parameters [_]\n          [offset slope])))))\n\n(defn regression-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-confidence-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n\n(defn regression-prediction-standard-error\n  [{:keys [n x-bar y-bar ss-x ss-y ss-xy] :as sum-squares} x]\n  (when (and (> n 2) (not (zero? ss-x)))\n    (sqrt\n     (* (/ 1 (- n 2))\n        (- ss-y (/ (sq ss-xy) ss-x))\n        (+ 1 (/ 1 n) (/ (sq (- x x-bar)) ss-x))))))\n\n(defn regression-prediction-interval\n  [{:keys [n] :as sum-squares} x alpha]\n  (let [regression (simple-linear-regression sum-squares)\n        y-hat (p/measure regression x)\n        se (regression-prediction-standard-error sum-squares x)\n        df (- n 2)\n        t-crit (d/critical-value (d/t {:v df}) alpha)\n        err (* t-crit se)]\n    (reify p/PInterval\n      (lower [_] (- y-hat err))\n      (upper [_] (+ y-hat err)))))\n"]}