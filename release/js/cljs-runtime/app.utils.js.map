{"version":3,"sources":["app/utils.cljs"],"mappings":";AASA,mBAAA,oFAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,zKAAKA;AAGL,uBAAA,vBAAMC,sDACHC;AADH,AAEE,IAAMC,QAAM,oFAAA,pFAACC,mDAAS,AAACC,oBAAQH;AAA/B,AACE,GAAI,GAAK,6CAAA,7CAACI,iDAAI,AAACC,gBAAMJ;AAArB;;AAEE,IAAAK,aAAuBL;YAAvB,AAAAM,4CAAAD,WAAA,IAAA,nEAAOE;UAAP,AAAAD,4CAAAD,WAAA,IAAA,jEAAaG;WAAb,AAAAF,4CAAAD,WAAA,IAAA,lEAAiBI;AAAjB,AAAA,kDAAA,sEAAA,kEAAA,hFACU,SAAA,RAAKF,mEAEN,OAAA,NAAKC,+DACL,CAAK,iBAAAE,WAAM,AAACN,gBAAMK;AAAb,AAAA,QAAAC;KAAA;AACK,QAAA,iDAAUD;;;KADf;AAEKA;;;;AAFL;;;OAAL;;;AAKf,6BAAA,qCAAAE,lEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEACWL;WADX,AAAAO,4CAAAF,eAAA,lEACiBI;WADjB,AAAAF,4CAAAF,eAAA,lEACsBH;AADtB,AAEE,OAACQ,yBAAQ,AAACC,uDAAUT,KAAKF,MAAMS;;AAEjC;;;;6BAAA,7BAAMG,kEAGHC;AAHH,AAIE,IAAAC,aAAoB,8DAAA,9DAACpB,mDAASmB;YAA9B,AAAAd,4CAAAe,WAAA,IAAA,nEAAOC;YAAP,AAAAhB,4CAAAe,WAAA,IAAA,nEAAaE;IACPC,UAAQ,AAAC1B,qBAAWwB;IACpBG,UAAQ,AAAC3B,qBAAWyB;AAF1B,AAGE,GAAI,YAAA,XAAMC;AACRC;;AACAD","names":["app.utils/months","app.utils/parse-date","date-string","split","clojure.string.split","clojure.string/trim","cljs.core._EQ_","cljs.core/count","vec__45131","cljs.core.nth","month","day","year","G__45136","p__45147","map__45148","cljs.core/--destructure-map","cljs.core.get","app.utils/map-to-timestamp","date","cljs-time.coerce/to-long","cljs_time.core.date_time","app.utils/parse-date-range","date-range","vec__45149","date1","date2","parsed1","parsed2"],"sourcesContent":["(ns app.utils\n   (:require\n     [cljs-time.core :refer [date-time]]\n     [cljs-time.coerce :refer [to-long]]\n     [clojure.string :as st]))\n\n; Outputs dates in format https://vega.github.io/vega-lite/docs/datetime.html\n; TODO encode this in specs\n\n(def months\n  [\"jan\" \"feb\" \"mar\" \"apr\" \"may\" \"jun\" \"jul\" \"aug\" \"sep\" \"oct\" \"nov\" \"dec\"])\n\n(defn parse-date\n  [date-string]\n  (let [split (st/split (st/trim date-string) \"/\")]\n    (if (not (= 3 (count split)))\n      nil\n      (let [[month day year] split]\n        {:month (int month)\n        ; {:month (nth months (- (int month) 1))\n         :date (int day)\n         :year (int (case (count year)\n                       2 (str \"20\" year)\n                       4 year\n                       nil))}))))\n\n(defn map-to-timestamp\n  [{:keys [month date year]}]\n  (to-long (date-time year month date)))\n\n(defn parse-date-range\n  \"Converts a range like '1/1/2021 to 2/1/2021' into a single date. Will return\n  the first date unless it is unparsable, in which case will return the second\"\n  [date-range]\n  (let [[date1 date2] (st/split date-range \" to \")\n        parsed1 (parse-date date1)\n        parsed2 (parse-date date2)]\n    (if (nil? parsed1)\n      parsed2\n      parsed1)))\n"]}