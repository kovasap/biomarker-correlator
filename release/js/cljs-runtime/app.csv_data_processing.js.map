{"version":3,"sources":["app/csv_data_processing.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__58104","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl","G__58105","cljs.core/coll?","G__58107","G__58110","app.csv-data-processing/DatedRows","app.time/date","app.csv-data-processing/ProcessedRows","app.time/timestamp","app.csv-data-processing/get-rows-by-dates","rows","cljs.core.into","cljs.core/sorted-map","cljs.core.map","row","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.csv-data-processing/merge-rows-using-dates","seq58113","self__4852__auto__","cljs.core/seq","sets-of-rows","cljs.core/vals","cljs.core.apply","cljs.core/merge-with","row1","row2","cljs.core.merge","app.csv-data-processing/add-timestamps","data","p1__58116#","cljs.core.assoc","app.time/map-to-timestamp","app.time/parse-date-range","app.csv-data-processing/floatify-data","p1__58123#","p__58125","vec__58126","cljs.core.nth","k","v","cljs.core._EQ_","js/parseFloat","app.csv-data-processing/get-all-data-validation-string","seq58138","headers","p1__58133#","cljs.core.remove","cljs.core/flatten","p1__58134#","cljs.core/keys","cljs.core/first","duplicate-headers","iter__4652__auto__","s__58143","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__58145","cljs.core/chunk-buffer","i__58144","vec__58147","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58142","cljs.core/chunk-rest","vec__58150","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","clojure.string.join","app.csv-data-processing/get-validation-string","all-dates","unique-dates","cljs.core/set","app.csv-data-processing/process-csv-data","seq58156","app.csv_data_processing.process_csv_data","cljs.core/chunk-first"],"sourcesContent":["(ns app.csv-data-processing\n  (:require\n    [app.time :as time]\n    [app.specs :as specs]\n    [cljs.spec.alpha :as s]\n    [malli.core :as m]\n    [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n    [clojure.set :refer [union]]\n    [clojure.string :as st]))\n\n(s/def ::dated-row (s/keys :req-un [:app.time/date]))\n(s/def ::dated-rows (s/coll-of ::dated-row))\n\n; Also all values are floats (not strings)\n(s/def ::processed-row (s/keys :req-un [:app.time/date\n                                        :app.time/timestamp]))\n(s/def ::processed-rows (s/coll-of ::processed-row))\n\n(def DatedRows\n  [:sequential [:map [:date time/date]]])\n\n(def ProcessedRows\n  [:sequential [:map [:date time/date]\n                     [:timestamp time/timestamp]]])\n\n; Returns map of dates to :dated-row maps.\n;; TODO figure out how to express this in spec\n(defn get-rows-by-dates [rows]\n  ; TODO find out how to get spec to do this assert for me\n  ; (assert (:date (first rows)))\n  (into (sorted-map) (map (fn [row] [(:date row) row]) rows)))\n\n(>defn merge-rows-using-dates\n  \"Merges N sequences of row maps (e.g. from different spreadsheets) using\n  the :date field as the joining attribute.\"\n  [& sets-of-rows]\n  [(s/coll-of ::dated-rows)\n   => ::dated-rows]\n  (vals (apply merge-with (fn [row1 row2] (merge row1 row2))\n               (map get-rows-by-dates sets-of-rows))))\n\n\n(>defn add-timestamps\n  [data]\n  [::dated-rows => ::dated-rows]\n  (map #(assoc % :timestamp (time/map-to-timestamp\n                              (time/parse-date-range\n                                (:date %))))\n       data))\n\n(>defn floatify-data\n  [data]\n  [::dated-rows => ::dated-rows]\n  (map #(into {} (map (fn [[k v]]\n                        [k (if (= k :date)\n                             v\n                             (js/parseFloat v))])\n                      %))\n       data))\n\n(floatify-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}])\n\n; TODO add spec validation to this function\n(defn get-all-data-validation-string\n  {:malli/schema [:=> [:cat [:sequential DatedRows]]\n                  specs/Hiccup]}\n  [& sets-of-rows]\n  (let [headers (remove #(= :date %)\n                        (flatten (map #(keys (first %)) sets-of-rows)))\n        duplicate-headers (for [[id freq] (frequencies headers)\n                                :when (> freq 1)]\n                            id)]\n    (if (seq duplicate-headers)  ; if not empty\n      [:div {:style {:color \"red\"}}\n       \"Some inputs headers were duplicated: \" (st/join \", \" duplicate-headers)]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(defn get-validation-string\n  {:malli/schema [:=> [:cat DatedRows]\n                  specs/Hiccup]}\n  [rows]\n  (let [all-dates (map :date rows)\n        unique-dates (set all-dates)]\n    (if (not (= (count all-dates) (count unique-dates)))\n      [:div {:style {:color \"red\"}} \"Repeated dates found in input!\"]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(>defn process-csv-data\n  [& sets-of-rows]\n  [(s/coll-of ::dated-rows)\n   => ::processed-rows]\n  (-> (apply merge-rows-using-dates sets-of-rows)\n    add-timestamps\n    floatify-data))\n\n(process-csv-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}])\n"]}