{"version":3,"sources":["app/comparison_matrix_table.cljs"],"mappings":";AAQA;;;;;mEAAA,nEAAMA,8IAIHC;AAJH,AAAA,mFAAA,8HAAA,zBAKmCC;;AACjC,oDAAA,2CAAA,xFAACC,8IAAa,AAAA,oFAAQF,WAChB,6CAAA,7CAACG,gFAAQ,iBAAAC,qBAAA,yFAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA+6EkC,AAAA8D,sBAAAnE;IA/6ElCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;QAAA,AAAAG,4CAAAF,WAAA,IAAA,/DAAOY;QAAP,AAAAV,4CAAAF,WAAA,IAAA,/DAASa;AAAT,AAAA,AAAA,AAAAV,uBAAAN,SAAA,mFACG,AAACiB,gDAAQ,kDAAA,KAAA,vDAACC,0IAAc,AAACC,eAAK,AAAA,8FAAYhC,IAAI,AAACgC,eAAKJ,aACpDC;;AAFH,eAAA,CAAAd,WAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,UAAA,AAAAS,+EAAA,AAAAC,qBAAAlB;;AAAA,OAAAe,qBAAA,AAAAC,gBAAAR,UAAA;;;AAAA,IAAAW,aAAA,AAAAC,gBAAApB;QAAA,AAAAa,4CAAAM,WAAA,IAAA,/DAAOI;QAAP,AAAAV,4CAAAM,WAAA,IAAA,/DAASK;AAAT,AAAA,OAAAH,eAAA,oaAAA,AAAAJ,+EAAA,AAAAK,eAAAtB,/aACG,AAACyB,gDAAQ,kDAAA,KAAA,vDAACC,0IAAc,AAACC,eAAK,AAAA,8FAAYhC,IAAI,AAACgC,eAAKJ,aACpDC;;;AAFH;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzB,mBAAY,AAAA,8GAAqBJ;;;AAIlD,iDAAA,jDAAMiC,0GAAoBC;AAA1B,AACE,OAACC,+CAAOC,gBACA,AAACC,4CAAItC,iEAAqCmC;;AAEpD,AAAA,AAAAI,yBAAA,AAAA,mIAAA,AAAA,qtBAAA,AAAAC,2BAAA,AAAAC,wDAAA,AAAA,8bAAA,AAAAC,yBAAA,mFAAA,uGAAA,sEAAA,mFAAA,8GAAA,8EAAA,AAAA,gRAAA,KAAA,MAAA,AAAA,8bAAA,AAAAD,wDAAA,AAAA,sEAAA,sEAAA,KAAA,MAAA,AAAA,sEAAA,KAAA,AAAA,KAAA;;AAAA;;;6CAAA,7CAAOG,kGACJC,+BAA+BC;AADlC,AAAA,uHAAA,AAAA,gGAAA,iBAAAH,eAAA,AAAA,hPAIGI,uGAAMD,6NACoBA;AAL7B,AAAA,QAAAH,6CAAAA,6EAAAA,lCAKuCE,yDAAAA;;;AAEvC,AAAA,AAAAN,yBAAA,AAAA,2JAAA,AAAA,ovBAAA,AAAAC,2BAAA,AAAAC,wDAAA,AAAA,6dAAA,AAAAC,yBAAA,mFAAA,4DAAA,+GAAA,mFAAA,uGAAA,sHAAA,AAAA,iTAAA,KAAA,MAAA,AAAA,6dAAA,AAAAD,wDAAA,AAAA,sEAAA,sEAAA,KAAA,MAAA,AAAA,sEAAA,KAAA,AAAA,KAAA;;AAAA;;;0DAAA,1DAAOS,4HACJC,QAAQN;AADX,AAAA,oBAAA,mBAAA,nCAIQO,gBAAeC,yEAAgBF;wBAJvC,4CAAA,WAAAH,3EAKQM,oBAAmBhB;AAL3B,AAAA,iFAAA,+CAAAU,zHAKiCJ,2CAAeC,+BACCX;GANjD,AAOgCqB,eAAKH;AAPrC,AAAA,mDAAA,WAAAH,vDAQKX;AARL,AAAA,oDAAA,wBAAA,rEAQWlC,6CAAMoD,mCACMC,EAAEC;AATzB,AAAA,GAAA,0BAAA,iFAAA,6DAAA,xKAWuBC,kPAA2BF;AAXlD;;AAAA,GAAA,0BAAA,iFAAA,6DAAA,xKAYuBE,kPAA2BD;AAZlD;;AAAA,AAAA,OAa6BE,kBAAQH,EAAEC;;;;IAbvCT;GAeSK;;AAET;;;;mDAAA,nDAAMO,8GAGHhC;AAHH,AAIE,IAAAiC,aAAuB,qEAAA,rEAACG,mDAAS,AAAChC,eAAKJ;gBAAvC,AAAAV,4CAAA2C,WAAA,IAAA,vEAAOC;WAAP,AAAA5C,4CAAA2C,WAAA,IAAA,lEAAiBE;AAAjB,AAAA,kDAAA,+DAEG,WAAKE;AAAL,AACE,IAAMC,UAAQ,gHAAA,2EAAA,3LAACC,0DAAQF;IACjBG,WAAS,AAACtC,gDAAQ,kDAAA,KAAA,6FAAA,pJAACC,0IAAc+B;AADvC,AAEE,GACE,6HAAA,5HAAM,CAACM,yCAAAA,kDAAAA,XAASF,8BAAAA;AADlB;;AAAA,GAGE,CAAG,CAACE,yCAAAA,kDAAAA,XAASF,8BAAAA,YAASG;AAHxB;;AAAA,AAAA;;;;GALP,0DAeG,iRAAA,KAAA,pRAAI,AAACX,0BAAU,gDAAA,iFAAA,jIAACY,2MAAgBC,sCAAiB3C","names":["app.comparison-matrix-table/get-biomarker-regression-result-keys","m","ghostwheel.core/=>","cljs.core.conj","cljs.core.into","iter__4652__auto__","s__57995","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__57997","cljs.core/chunk-buffer","i__57996","vec__58002","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57994","cljs.core/chunk-rest","vec__58005","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core.keyword","clojure.string.join","cljs.core/name","app.comparison-matrix-table/make-per-input-row","same-input-results","cljs.core.reduce","cljs.core/merge","cljs.core.map","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","fexpr__58022","app.comparison-matrix-table/add-aggregates","input-significant-correlations","flat-map","cljs.core.merge","p1__58023#","p1__58024#","app.comparison-matrix-table/make-comparison-matrix-data","results","rows-by-input","cljs.core/group-by","per-input-results","cljs.core/vals","cljs.core/sorted-map-by","a","b","cljs.core/contains?","cljs.core/compare","app.comparison-matrix-table/make-datagrid-column","vec__58042","biomarker","stat","clojure.string.split","row","clj-row","cljs.core.js__GT_clj","pval-key","app.stats/p-value-cutoff","clojure.set.union","app.single-var-table/aggregate-names","cljs.core/chunk-first"],"sourcesContent":["(ns app.comparison-matrix-table\n  (:require\n   [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n   [app.stats :as stats]\n   [app.single-var-table :refer [aggregate-names]]\n   [clojure.set :refer [union]]\n   [clojure.string :as st]))\n\n(defn get-biomarker-regression-result-keys\n  \"Converts {:input :i :biomarker :b :results {:slope 5.0}} to\n  {:input :i :b--slope 5.0}\n  \"\n  [m]\n  [:app.specs/pairwise-correlation => :app.specs/maps]\n  (conj {:input (:input m)}\n        (into {} (for [[k v] (:regression-results m)]\n                   [(keyword (st/join \"--\" [(name (:biomarker m)) (name k)]))\n                    v]))))\n\n(defn make-per-input-row [same-input-results]\n  (reduce merge\n          (map get-biomarker-regression-result-keys same-input-results)))\n\n(>defn add-aggregates\n  [input-significant-correlations flat-map]\n  [:app.specs/one-to-many-correlations :app.specs/maps\n   => :app.specs/maps]\n  (merge flat-map (:aggregates\n                    ((:input flat-map) input-significant-correlations))))\n\n(>defn make-comparison-matrix-data\n  [results input-significant-correlations]\n  [:app.specs/pairwise-correlations :app.specs/one-to-many-correlations\n   => :app.specs/maps]\n  (let [rows-by-input (group-by :input results)\n        per-input-results (map #(add-aggregates input-significant-correlations\n                                                (make-per-input-row %))\n                               (vals rows-by-input))]\n    (map #(into (sorted-map-by\n                  (fn [a b]\n                    (cond\n                      (contains? #{:input :score} a) -1\n                      (contains? #{:input :score} b) -1\n                      :else (compare a b))))\n                %)\n         per-input-results)))\n\n(defn make-datagrid-column\n  \"Generates a react-data-grid column \n  https://github.com/adazzle/react-data-grid/blob/929911c506919e96bd12e48ea5de68ec9511ca10/src/types.ts#L7\"\n  [k]\n  (let [[biomarker stat] (st/split (name k) #\"\\-\\-\")]\n    {:cellClass\n     (fn [row]\n       (let [clj-row (js->clj row :keywordize-keys true)\n             pval-key (keyword (st/join \"--\" [biomarker \"p-value\"]))]\n         (cond\n           (nil? (pval-key clj-row))\n           \"\"\n           (< (pval-key clj-row) stats/p-value-cutoff)\n           \"\"\n           :else\n           \"has-text-grey-lighter\")))\n     :frozen\n     ; TODO get all the :aggregates keys from the spec here instead of\n     ; hardcoding\n     (if (contains? (union #{:input} aggregate-names) k)\n       true\n       false)}))\n\n\n"]}