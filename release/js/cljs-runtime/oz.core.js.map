{"version":3,"sources":["oz/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","p__38857","map__38858","cljs.core/--destructure-map","cljs.core.get","oz.core/apply-log-level","opts","log-level","cljs.core/Keyword","cljs.core.dissoc","cljs.core.assoc","G__38859","js/Error","cljs.core.keyword","js/shadow.js.shim.module$vega.Debug","js/shadow.js.shim.module$vega.Info","js/shadow.js.shim.module$vega.Warn","var_args","G__38863","oz.core/embed-vega","elem","doc","oz.core.embed_vega","cljs.core/clj->js","cljs.core.merge","js/shadow.js.shim.module$vega_embed","err","js/console.log","oz.core/update-vega","old-doc","new-doc","old-opts","new-opts","G__38885","cljs.core._EQ_","or__4253__auto__","cljs.core.not_EQ_","G__38895","oz.core/vega","oz.core.vega","reagent.core.create_class","this","reagent.dom/dom-node","p__38903","vec__38906","cljs.core.nth","_","G__38917","oz.core/vega-lite","oz.core.vega_lite","js/oz","js/oz.core","js/oz.core.live-viewers-state","oz.core/live-viewers-state","reagent.core.atom","oz.core/register-live-view","key","component","cljs.core.swap_BANG_","cljs.core/assoc","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","oz.core/register-live-views","p__38941","map__38942","seq38936","self__4852__auto__","cljs.core/seq","live-views","cljs.core/merge","oz.core/default-data-table-opts","G__38948","oz.core/data-table","p__38952","map__38953","data","oz.core.data_table","page","sort-key","sort-order","state","header","cljs.core.take","cljs.core.map","cljs.core.comp","cljs.core/set","cljs.core/keys","cljs.core.reduce","clojure.set/union","map__38962","cljs.core/deref","map__38963","per-page","tr-style","td-style","th-style","cljs.core.merge_with","opt1","opt2","cljs.core/map?","scoped-data","G__38980","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","last-page","cljs.core/quot","cljs.core/count","cljs.core/update","cljs.core/dec","cljs.core/inc","iter__4652__auto__","s__39004","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__39006","cljs.core/chunk-buffer","i__39005","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39003","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/name","G__39036","G__39039","s__39043","b__39045","i__39044","iter__39042","row","cljs.core/hash","s__39051","b__39053","i__39052","iter__39050","s__39055","b__39057","i__39056","iter__39054","oz.core.register_live_views","oz.core/live-view","live-viewers","clojure.walk/prewalk","x","temp__5751__auto__","component-fn","and__4251__auto__","cljs.core/coll?","G__39073","cljs.core.into","oz.core/view-spec","cljs.core/chunk-first"],"sourcesContent":["(ns oz.core\n  (:require [\"vega-embed\" :as vegaEmbed]\n            [\"vega\" :as vega]\n            ;[\"leaflet-vega\" :as leafletVega]\n            ;[\"leaflet\" :as leaflet]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [reagent.core :as r]\n            [reagent.dom :as rd]))\n\n\n\n(enable-console-print!)\n\n\n(defn- apply-log-level\n  [{:as opts :keys [log-level]}]\n  (if (or (keyword? log-level) (string? log-level))\n    (-> opts\n        (dissoc :log-level)\n        (assoc :logLevel\n               (case (keyword log-level)\n                 :debug vega/Debug\n                 :info vega/Info\n                 :warn vega/Warn)))\n    opts))\n\n(defn ^:no-doc embed-vega\n  ([elem doc] (embed-vega elem doc {}))\n  ([elem doc opts]\n   (when doc\n     (let [doc (clj->js doc)\n           opts (->> opts\n                     (merge {:renderer :canvas\n                             :mode \"vega-lite\"})\n                     (apply-log-level))\n           opts (merge {:renderer :canvas}\n                        ;; Have to think about how we want the defaults here to behave\n                       opts)]\n       (-> (vegaEmbed elem doc (clj->js opts))\n           (.catch (fn [err]\n                     (js/console.log err))))))))\n\n;; WIP; TODO Finish figuring this out; A little thornier than I thought, because data can come in so many\n;; different shapes; Should clojure.spec this out:\n;; * url\n;; * named data\n;; * vega vs lite\n;; * data nested in layers\n;; * other?\n(defn ^:no-doc update-vega\n  ([elem old-doc new-doc old-opts new-opts]\n   (case\n     ;; Only rerender from scratch if the viz specification has actually changed, or if always rerender is\n     ;; specified\n     (or (:always-rerender new-opts)\n         (not= (dissoc old-doc :data) (dissoc new-doc :data))\n         (not= old-opts new-opts))\n     (embed-vega elem new-doc new-opts)\n     ;; Otherwise, just update the data component\n     ;; TODO This is the hard part to figure out\n     ;(= ())\n     ;()\n     ;; Otherwise, do nothing\n     :else\n     nil)))\n\n(defn vega\n  \"Reagent component that renders vega\"\n  ([doc] (vega doc {}))\n  ([doc opts]\n   ;; Is this the right way to do this? So vega component behaves abstractly like a vega-lite potentially?\n   (let [opts (merge {:mode \"vega\"} opts)]\n     (r/create-class\n      {:display-name \"vega\"\n       :component-did-mount (fn [this]\n                              (embed-vega (rd/dom-node this) doc opts))\n       ;; Need to look into this further to see how these args even work; may not be doing new-opts right here?\n       ;; (http://reagent-project.github.io/docs/master/reagent.core.html)\n       ;; (https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\n       :component-will-update (fn [this [_ new-doc new-opts]]\n                                ;(update-vega (rd/dom-node this) doc new-doc opts new-opts)\n                                (embed-vega (rd/dom-node this) new-doc new-opts))\n       :reagent-render (fn [doc]\n                         [:div.viz])}))))\n\n(defn vega-lite\n  \"Reagent component that renders vega-lite.\"\n  ([doc] (vega-lite doc {}))\n  ([doc opts]\n   ;; Which way should the merge go?\n   (vega doc (merge opts {:mode \"vega-lite\"}))))\n\n\n(defonce ^:private live-viewers-state\n  (r/atom {:vega vega\n           :vega-lite vega-lite}))\n\n(defn register-live-view\n  [key component]\n  (swap! live-viewers-state assoc key component))\n\n;@live-viewers-state\n\n(defn register-live-views\n  [& {:as live-views}]\n  (swap! live-viewers-state merge live-views))\n\n\n(def default-data-table-opts\n  {:per-page 50\n   :tr-style {}\n   :td-style {:padding-right 10}\n   :th-style {:padding-right 10\n              :cursor :pointer}})\n\n(defn data-table\n  ([data] (data-table data {}))\n  ([data {:keys [page sort-key sort-order]}]\n   (let [state (r/atom {:page (or page 0) :sort-key sort-key :sort-order (or sort-order :ascending)})\n         header (->> data (take 10) (map (comp set keys)) (reduce clojure.set/union))]\n     (fn [data opts]\n       (let [{:keys [page sort-key sort-order]} @state\n             {:keys [per-page tr-style td-style th-style]}\n             (merge-with (fn [opt1 opt2]\n                           (if (and (map? opt1) (map? opt2))\n                             (merge opt1 opt2)\n                             opt2))\n               default-data-table-opts\n               opts)\n             scoped-data (cond->> data\n                           sort-key (sort-by sort-key)\n                           (= :descending sort-order) (reverse)\n                           per-page (drop (* per-page page))\n                           per-page (take per-page))\n             last-page (quot (count data) per-page)]\n         [:div\n          (when (> (count data) per-page)\n            [:p\n             {:style {:margin-bottom 10}}\n             [:span\n              {:style {:padding-right 20}}\n              \"Current page: \" (inc page)]\n             (when (> page 0)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page dec))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"prev\"])\n             (when (< page last-page)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page inc))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"next\"])])\n          [:table\n           ;; header row\n           [:tr\n            {:style tr-style}\n            (for [key header]\n              ^{:key key}\n              [:th {:style th-style\n                    :on-click (fn [& _]\n                                (swap! state merge {:sort-key key\n                                                    :sort-order (if (and (= key sort-key) (= sort-order :ascending))\n                                                                  :descending\n                                                                  :ascending)}))}\n                (name key)\n                (when (= sort-key key)\n                  (case sort-order\n                    :ascending \"\u2303\"\n                    :descending \"\u2304\"))])]\n           (for [row scoped-data]\n             ^{:key (hash row)}\n             [:tr\n              {:style tr-style}\n              (for [key header]\n                ^{:key key}\n                [:td {:style td-style} (get row key)])])]])))))\n\n\n(register-live-views\n  :vega vega\n  :vega-lite vega-lite\n  :data-table data-table)\n\n(defn ^:no-doc live-view\n  ;; should handle sharing data with nodes that need it?\n  [doc]\n  ;; prewalk spec, rendering special hiccup tags like :vega and :vega-lite, and potentially other composites,\n  ;; rendering using the components above. Leave regular hiccup unchanged).\n  ;; TODO finish writing; already hooked in below so will break now\n  (let [live-viewers @live-viewers-state]\n    (clojure.walk/prewalk\n      (fn [x] (if-let [component-fn (and (coll? x) (live-viewers (first x)))]\n                (into [component-fn] (rest x))\n                x))\n      doc)))\n\n\n;(def remote-zipper)\n\n;(let [live-viewers @live-viewers-state\n      ;live-viewer-keys (set (keys live-viewers))]\n  ;(clojure.walk/postwalk\n    ;(fn [x]\n      ;(println \"visiting node: \" x)\n      ;(if (and (coll? x) (live-viewer-keys (first x)))\n        ;(into\n          ;[(get live-viewers (first x))]\n          ;(rest x))\n        ;x))\n    ;[:div\n     ;[:h1 \"hello dawg\"]\n     ;[:vega-lite {:data {:values [{:a 1 :b 2} {:a 3 :b 4}]}\n                  ;:mark :point\n                  ;:encoding {:x {:field :a}\n                             ;:y {:field :b}}}]]))\n\n\n\n;; TODO Rename this to live-view; But need to make sure to edit in the repl tooling application code as well,\n;; since that's what actually uses this\n(def ^:no-doc view-spec live-view)\n  ;; should handle sharing data with nodes that need it?\n\n\n\n;(comment)\n  ;; This is still a work in progress\n  ;(defn ^:private render-leaflet-vega [dom-node]\n    ;;(.map leaflet dom-node)\n    ;(let [m (.map leaflet \"map\")\n          ;_ (.setView m (clj->js [51.505 -0.09]) 4)\n          ;tile (.tileLayer leaflet\n                           ;\"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png\"\n                           ;(clj->js {:attribution \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"}))\n\n          ;_ (.addTo tile m)\n          ;marker (.marker leaflet (clj->js [40.7128 -74.0059]))]\n      ;;(js/console.log (clj->js [40.7128 -74.0059]))\n      ;(.addTo marker m)))\n      ;;(.bindPopup marker \"a red-headed rhino\")))\n\n  ;;; This is still a work in progress\n  ;(defn ^:private leaflet-vega\n    ;\"WIP/Alpha wrapper around leaflet-vega\"\n    ;[]\n    ;(r/create-class\n      ;{:display-name \"leaflet-vega\"\n       ;:component-did-mount (fn [this]\n                              ;(render-leaflet-vega (rd/dom-node this)))\n       ;:component-did-update (fn [this [_]]\n                               ;(render-leaflet-vega (rd/dom-node this)))\n       ;:reagent-render (fn []\n                         ;[:div#map])})))\n\n\n"]}