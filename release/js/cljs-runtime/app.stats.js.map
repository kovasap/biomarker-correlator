{"version":3,"sources":["app/stats.cljs"],"mappings":"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","names":["app.stats/compute-linear-estimate","model","input","params","kixi.stats.protocols/parameters","offset","cljs.core/first","slope","cljs.core/last","app.stats/calc-rsq","linear-model","var1","var2","data","cljs.core.transduce","cljs.core/identity","p1__45135#","kixi.stats.core/r-squared","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.stats/filter-missing","seq45144","G__45145","cljs.core/next","self__4851__auto__","ks","cljs.core.filter","datum","p1__45137#","cljs.core/every?","cljs.core/not","js/isNaN","app.stats/round","n","Math/round","js/Number","app.stats/get-correlation-with-pval","r","kixi.stats.core/correlation","degrees-of-freedom","cljs.core/count","t-stat","kixi.stats.math/sqrt","kixi.stats.math/sq","t-test","kixi.stats.test.test_result","kixi.stats.distribution/t","p-val","kixi.stats.test/p-value","app.stats/get-plot-scale","variable","var-data","cljs.core.map","cljs.core.apply","cljs.core/min","cljs.core/max","app.stats/calc-correlation","cleaned-data","p1__45157#","cljs.core/select-keys","app.stats.filter_missing","linear-result","kixi.stats.core/simple-linear-regression","correlation-result","error","kixi.stats.core.regression_standard_error","rsq","oz.core/vega-lite"],"sourcesContent":["(ns app.stats\n  (:require\n   [oz.core :as oz]\n   [app.specs :as specs]\n   [kixi.stats.math :refer [sq sqrt]]\n   [kixi.stats.core :as kixi]\n   [kixi.stats.test :as kixi-t]\n   [kixi.stats.distribution :as kixi-d]\n   [kixi.stats.protocols :as kixi-p]))\n\n; model is [offset slope]\n(defn compute-linear-estimate [model input]\n  (let [params (kixi-p/parameters model)\n        offset (first params)\n        slope (last params)]\n    (+ offset (* slope input))))\n\n(defn calc-rsq\n  \"To compute r-squared, we need to compare each value in data for var2\n  to the value we would expected to get for var2 if we plugged var1\n  into our linear model (computed by kixi/simple-linear-regression)\n  To do this, we need to pass in to kixi/r-squared: \n    1. a function that takes in a data entry, plugs var1 into the linear\n       model, and returns the var2 value according to the model\n    2. a function that takes in a data entry and returns the actual\n       var2 value\"\n  [linear-model var1 var2 data]\n  (if (nil? linear-model)\n    nil\n    (transduce\n     identity (kixi/r-squared\n               #(compute-linear-estimate linear-model (var1 %))\n               var2)\n     data)))\n\n(defn filter-missing\n  \"Remove maps from data (collection of maps) for which any of the given keys\n  are not present or have nil values.\"\n  [data & ks]\n  (filter (fn [datum] (every? #(not (js/isNaN (% datum))) ks))\n          data))\n\n(defn round [n]\n  (/ (Math/round (* 1000 (+ n (. js/Number -EPSILON)))) 1000))\n\n(defn get-correlation-with-pval\n  \"Gets a correlation between the two given vars in the data.\n  \n  See discussion at https://github.com/MastodonC/kixi.stats/issues/40 for some\n  more context\"\n  [data var1 var2]\n  (let [r (transduce identity (kixi/correlation var1 var2) data)\n        degrees-of-freedom (- (count data) 2)\n        t-stat (/ (* r (sqrt degrees-of-freedom))\n                  (sqrt (- 1 (sq r))))\n        t-test (kixi-t/test-result t-stat (kixi-d/t {:v degrees-of-freedom}))\n        p-val (kixi-t/p-value t-test)]\n    {:correlation r\n     :p-value p-val}))\n\n(defn get-plot-scale\n  [variable data]\n  (let [var-data (map variable data)]\n    {:domain [(apply min var-data)\n              (apply max var-data)]}))\n\n(defn calc-correlation [var1 var2 data]\n  (let [cleaned-data (map #(select-keys % [:timestamp var1 var2])\n                          (filter-missing data var1 var2))\n        linear-result (transduce identity\n                                 (kixi/simple-linear-regression var1 var2)\n                                 cleaned-data)\n        correlation-result (get-correlation-with-pval cleaned-data var1 var2)\n        error (transduce identity\n                         (kixi/regression-standard-error var1 var2)\n                         cleaned-data)\n        rsq (calc-rsq linear-result var1 var2 cleaned-data)]\n    ; (prn (first  cleaned-data))\n    ; (if (and (= var1 :folate) (= var2 :glucose))\n    ;   (do (prn cleaned-data) (prn correlation-result))\n    {:linear-slope (round (if (nil? linear-result) nil\n                              (last (kixi-p/parameters linear-result))))\n     :linear-r-squared (round rsq)\n     :vega-scatterplot [oz.core/vega-lite\n                        {:data {:values cleaned-data}\n                         :width 300\n                         :height 300\n                         :mark \"circle\"\n                         :encoding {:x {:field var1\n                                        :scale (get-plot-scale var1 data)\n                                        :type \"quantitative\"}\n                                    :y {:field var2\n                                        :scale (get-plot-scale var2 data)\n                                        :type \"quantitative\"}\n                                    :color {:field :timestamp \n                                            :scale {:type \"time\"\n                                                    :scheme \"viridis\"}}}}]\n     ; :vega-scatterplot [:div\n     ;                    [:div.label \"Hover for plot\"]\n     ;                    [:div.hide\n     ;                     [oz.core/vega-lite\n     ;                       {:data {:values cleaned-data}\n     ;                        :width 300\n     ;                        :height 300\n     ;                        :mark \"circle\"\n     ;                        :encoding {:x {:field var1\n     ;                                       :type \"quantitative\"}\n     ;                                   :y {:field var2\n     ;                                       :type \"quantitative\"}}}]])\n     :correlation (round (:correlation correlation-result))\n     :correlation-p-value (round (:p-value correlation-result))\n     :datapoints (count cleaned-data)}))\n"]}