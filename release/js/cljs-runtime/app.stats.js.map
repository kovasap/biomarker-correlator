{"version":3,"sources":["app/stats.cljs"],"mappings":"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","names":["app.stats/p-value-cutoff","app.stats/compute-linear-estimate","model","input","params","kixi.stats.protocols/parameters","offset","cljs.core/first","slope","cljs.core/last","app.stats/calc-rsq","linear-model","var1","var2","data","cljs.core.transduce","cljs.core/identity","p1__58187#","kixi.stats.core/r-squared","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.stats/filter-missing","seq58200","G__58201","cljs.core/next","self__4851__auto__","ks","cljs.core.filter","datum","p1__58199#","cljs.core/every?","cljs.core/not","js/isNaN","app.stats/round","n","Math/round","js/Number","app.stats/get-correlation-with-pval","r","kixi.stats.core/correlation","degrees-of-freedom","cljs.core/count","t-stat","kixi.stats.math/sqrt","kixi.stats.math/sq","t-test","kixi.stats.test.test_result","kixi.stats.distribution/t","p-val","kixi.stats.test/p-value","app.stats/get-plot-scale","variable","var-data","cljs.core.map","cljs.core.apply","cljs.core/min","cljs.core/max","app.stats/regression-results","spec_tools.data_spec.spec","cljs.core/float?","cljs.core/int?","cljs.spec.alpha/def-impl","app.stats/CorrelationResults","app.specs/Hiccup","app.time/timestamp","app.stats/calc-correlation","cleaned-data","p1__58212#","cljs.core/select-keys","app.stats.filter_missing","correlation-result","oz.core/vega-lite","app.stats/PairwiseCorrelations","cljs.core/keyword?","app.stats/compute-correlations","inputs","biomarkers","iter__4652__auto__","s__58216","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","xs__6308__auto__","iterys__4648__auto__","s__58218","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__58220","cljs.core/chunk-buffer","i__58219","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58217","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__4649__auto__","cljs.core.concat","iter__58215","biomarker","cljs.core/chunk-first"],"sourcesContent":["(ns app.stats\n  (:require\n    [app.specs :as specs]\n    [app.csv-data-processing :as proc]\n    [app.time :as time]\n    [oz.core :as oz]\n    [malli.core :as m]\n    [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n    [spec-tools.data-spec :as ds]\n    [cljs.spec.alpha :as s]\n    [kixi.stats.math :refer [sq sqrt]]\n    [kixi.stats.core :as kixi]\n    [kixi.stats.test :as kixi-t]\n    [kixi.stats.distribution :as kixi-d]\n    [kixi.stats.protocols :as kixi-p]))\n\n(def p-value-cutoff 0.05)\n\n; model is [offset slope]\n(defn compute-linear-estimate [model input]\n  (let [params (kixi-p/parameters model)\n        offset (first params)\n        slope (last params)]\n    (+ offset (* slope input))))\n\n(defn calc-rsq\n  \"To compute r-squared, we need to compare each value in data for var2\n  to the value we would expected to get for var2 if we plugged var1\n  into our linear model (computed by kixi/simple-linear-regression)\n  To do this, we need to pass in to kixi/r-squared: \n    1. a function that takes in a data entry, plugs var1 into the linear\n       model, and returns the var2 value according to the model\n    2. a function that takes in a data entry and returns the actual\n       var2 value\"\n  [linear-model var1 var2 data]\n  (if (nil? linear-model)\n    nil\n    (transduce\n     identity (kixi/r-squared\n               #(compute-linear-estimate linear-model (var1 %))\n               var2)\n     data)))\n\n(defn filter-missing\n  \"Remove maps from data (collection of maps) for which any of the given keys\n  are not present or have nil values.\"\n  [data & ks]\n  (filter (fn [datum] (every? #(not (js/isNaN (% datum))) ks))\n          data))\n\n(defn round [n]\n  (/ (Math/round (* 1000 (+ n (. js/Number -EPSILON)))) 1000))\n\n(defn get-correlation-with-pval\n  \"Gets a correlation between the two given vars in the data.\n  \n  See discussion at https://github.com/MastodonC/kixi.stats/issues/40 for some\n  more context\"\n  [data var1 var2]\n  (let [r (transduce identity (kixi/correlation var1 var2) data)\n        degrees-of-freedom (- (count data) 2)\n        t-stat (/ (* r (sqrt degrees-of-freedom))\n                  (sqrt (- 1 (sq r))))\n        t-test (kixi-t/test-result t-stat (kixi-d/t {:v degrees-of-freedom}))\n        p-val (kixi-t/p-value t-test)]\n    {:correlation r\n     :p-value p-val}))\n\n(defn get-plot-scale\n  [variable data]\n  (let [var-data (map variable data)]\n    {:domain [(apply min var-data)\n              (apply max var-data)]}))\n\n(def regression-results\n  (ds/spec ::regression-results\n    {:scatterplot :app.specs/hiccup\n     :correlation float?\n     :p-value float?\n     :raw-data :app.csv-data-processing/processed-rows\n     :datapoints int?}))\n(s/def ::regression-results regression-results)\n\n(def CorrelationResults\n  [:map [:scatterplot specs/Hiccup]\n        [:correlation float?]\n        [:p-value float?]\n        [:raw-data [:sequential [:map [:timestamp time/timestamp]]]]\n        [:datapoints int?]])\n\n(defn calc-correlation\n  [var1 var2 data]\n  ; [keyword? keyword? :app.specs/maps\n  ;  => ::regression-results]\n  (let [cleaned-data (map #(select-keys % [:timestamp var1 var2])\n                          (filter-missing data var1 var2))\n        ; linear-result (transduce identity\n        ;                          (kixi/simple-linear-regression var1 var2)\n        ;                          cleaned-data))\n        ; rsq (calc-rsq linear-result var1 var2 cleaned-data)\n        correlation-result (get-correlation-with-pval cleaned-data var1 var2)]\n        ; error (transduce identity\n        ;                  (kixi/regression-standard-error var1 var2)\n        ;                  cleaned-data]\n    ; (prn (first  cleaned-data))\n    ; (if (and (= var1 :na) (= var2 :hdl))\n    ;   (do (prn cleaned-data) (prn correlation-result))\n    ; {:linear-slope (round (if (nil? linear-result) nil\n    ;                           (last (kixi-p/parameters linear-result)))]\n    ;  :linear-r-squared (round rsq)\n    {:scatterplot [oz.core/vega-lite\n                   {:data {:values cleaned-data}\n                    :width 300\n                    :height 300\n                    :mark \"circle\"\n                    :encoding {:x {:field var1\n                                   :scale (get-plot-scale var1 data)\n                                   :type \"quantitative\"}\n                               :y {:field var2\n                                   :scale (get-plot-scale var2 data)\n                                   :type \"quantitative\"}\n                               :color {:field :timestamp \n                                       :scale {:type \"time\"\n                                               :scheme \"viridis\"}}}}]\n     :raw-data cleaned-data\n     :correlation (round (:correlation correlation-result))\n     :p-value (round (:p-value correlation-result))\n     :datapoints (count cleaned-data)}))\n\n(def PairwiseCorrelations\n  [:sequential\n   [:map [:input keyword?]\n         [:biomarker keyword?]\n         [:regression-results CorrelationResults]]])\n\n(defn compute-correlations\n  {:malli/schema [:=> [:cat\n                       [:sequential keyword?]\n                       [:sequential keyword?]\n                       proc/ProcessedRows]\n                  PairwiseCorrelations]}\n  [inputs biomarkers data]\n  ; [(s/coll-of keyword?) (s/coll-of keyword?)\n  ;  :app.csv-data-processing/processed-rows\n  ;  => ::pairwise-correlations]\n  (for [input inputs\n        biomarker biomarkers]\n    {:input input\n     :biomarker biomarker\n     :regression-results (calc-correlation input biomarker data)}))\n"]}