{"version":3,"sources":["app/csv_data_processing.cljs"],"mappings":"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","names":["app.csv-data-processing/DatedRow","app.time/Date","app.csv-data-processing/ProcessedRow","app.time/Timestamp","app.csv-data-processing/get-rows-by-dates","rows","cljs.core.into","cljs.core/sorted-map","cljs.core.map","row","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.csv-data-processing/merge-rows-using-dates","seq81665","self__4852__auto__","cljs.core/seq","sets-of-rows","cljs.core/vals","cljs.core.apply","cljs.core/merge-with","row1","row2","cljs.core.merge","app.csv-data-processing/add-timestamps","data","p1__81682#","cljs.core.assoc","app.time/map-to-timestamp","app.time/parse-date-range","app.csv-data-processing/floatify-data","p1__81683#","p__81690","vec__81691","cljs.core.nth","k","v","cljs.core._EQ_","js/parseFloat","app.csv-data-processing/get-all-data-validation-string","seq81702","headers","p1__81697#","cljs.core.remove","cljs.core/flatten","p1__81698#","cljs.core/keys","cljs.core/first","duplicate-headers","iter__4652__auto__","s__81704","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__81706","cljs.core/chunk-buffer","i__81705","vec__81710","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__81703","cljs.core/chunk-rest","vec__81717","cljs.core/cons","cljs.core/rest","id","freq","cljs.core/frequencies","clojure.string.join","app.csv-data-processing/dups","sequence","s__81734","b__81736","i__81735","vec__81753","iter__81733","vec__81760","element","app.csv-data-processing/get-validation-string","duplicate-dates","app.csv-data-processing/process-csv-data","seq81788","app.csv_data_processing.process_csv_data","cljs.core/chunk-first"],"sourcesContent":["(ns app.csv-data-processing\n  (:require\n    [app.time :as time]\n    [app.specs :as specs]\n    [clojure.string :as st]))\n\n(def DatedRow\n  [:map [:date time/Date]])\n\n; TODO add `:keyword :double` pairs when\n; https://github.com/metosin/malli/issues/682 is closed.\n(def ProcessedRow\n  [:map [:date time/Date]\n        [:timestamp time/Timestamp]])\n\n; Returns map of dates to :dated-row maps.\n;; TODO figure out how to express this in spec\n(defn get-rows-by-dates [rows]\n  ; TODO find out how to get spec to do this assert for me\n  ; (assert (:date (first rows)))\n  (into (sorted-map) (map (fn [row] [(:date row) row]) rows)))\n\n(defn merge-rows-using-dates\n  \"Merges N sequences of row maps (e.g. from different spreadsheets) using\n  the :date field as the joining attribute.\"\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential DatedRow]]}\n  [& sets-of-rows]\n  (vals (apply merge-with (fn [row1 row2] (merge row1 row2))\n               (map get-rows-by-dates sets-of-rows))))\n\n\n(defn add-timestamps\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (map #(assoc % :timestamp (time/map-to-timestamp\n                              (time/parse-date-range\n                                (:date %))))\n       data))\n\n(defn floatify-data\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (map #(into {} (map (fn [[k v]]\n                        [k (if (= k :date)\n                             v\n                             (js/parseFloat v))])\n                      %))\n       data))\n\n(floatify-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}])\n\n; TODO add spec validation to this function\n(defn get-all-data-validation-string\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  specs/Hiccup]}\n  [& sets-of-rows]\n  (let [headers (remove #(= :date %)\n                        (flatten (map #(keys (first %)) sets-of-rows)))\n        duplicate-headers (for [[id freq] (frequencies headers)\n                                :when (> freq 1)]\n                            id)]\n    (if (seq duplicate-headers)  ; if not empty\n      [:div {:style {:color \"red\"}}\n       \"Some inputs headers were duplicated: \" (st/join \", \" duplicate-headers)]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(defn dups [sequence]\n  (for [[element freq] (frequencies sequence)\n        :when (> freq 1)]\n   element))\n\n(defn get-validation-string\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  specs/Hiccup]}\n  [rows]\n  (let [duplicate-dates (dups (map :date rows))]\n    (if (> (count duplicate-dates) 0)\n      [:div {:style {:color \"red\"}}\n       \"Repeated dates found in file \" (str duplicate-dates) \"!\"]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(defn process-csv-data\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential ProcessedRow]]}\n  [& sets-of-rows]\n  (-> (apply merge-rows-using-dates sets-of-rows)\n    add-timestamps\n    floatify-data))\n\n(process-csv-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}]\n                  [{:a \"100\" :b \"20\" :date \"4/2/10\"}])\n"]}