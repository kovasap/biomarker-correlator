{"version":3,"sources":["app/csv_data_processing.cljs"],"mappings":"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","names":["app.csv-data-processing/DatedRow","app.time/Date","app.csv-data-processing/ProcessedRow","app.time/Timestamp","app.csv-data-processing/get-rows-by-dates","rows","cljs.core.into","cljs.core/sorted-map","cljs.core.map","row","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.csv-data-processing/merge-rows-using-dates","seq48865","self__4852__auto__","cljs.core/seq","sets-of-rows","cljs.core/vals","cljs.core.apply","cljs.core/merge-with","row1","row2","cljs.core.merge","app.csv-data-processing/add-timestamps","data","p1__48873#","cljs.core.assoc","app.time/date-to-timestamp","app.csv-data-processing/not-NaN","v","cljs.core._EQ_","app.csv-data-processing/floatify-data","iter__4652__auto__","s__48877","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__48879","cljs.core/chunk-buffer","i__48878","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48876","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__48881","b__48883","i__48882","vec__48885","cljs.core.nth","iter__48880","vec__48889","s__48893","b__48895","i__48894","vec__48896","iter__48892","vec__48899","k","js/parseFloat","app.csv-data-processing/get-all-data-validation-string","seq48905","headers","p1__48903#","cljs.core.remove","cljs.core/flatten","p1__48904#","cljs.core/keys","duplicate-headers","s__48908","b__48910","i__48909","vec__48915","iter__48907","vec__48918","id","freq","cljs.core/frequencies","clojure.string.join","app.csv-data-processing/dups","sequence","s__48929","b__48931","i__48930","vec__48935","iter__48928","vec__48938","element","app.csv-data-processing/get-validation-string","duplicate-dates","app.csv-data-processing/process-csv-data","seq48951","app.csv_data_processing.process_csv_data","app.csv-data-processing/combine-rows","aggregation-fn","earliest-row","cljs.core.sort_by","unique-keys","cljs.core.reduce","clojure.set/union","s__48954","b__48956","i__48955","iter__48953","cljs.core/set","s__48958","b__48960","i__48959","iter__48957","cljs.core/contains?","G__48964","G__48965","p1__48952#","cljs.core.filter","app.math/average","app.csv-data-processing/aggregate-data","period-type","s__48974","b__48976","i__48975","vec__48980","iter__48973","vec__48983","period","grouped-rows","app.time/group-by-period","cljs.core/chunk-first"],"sourcesContent":["(ns app.csv-data-processing\n  (:require\n    [app.time :as time]\n    [app.specs :as specs]\n    [app.math :as math]\n    [clojure.string :as st]\n    [clojure.set :refer [union]]))\n\n(def DatedRow\n  [:map [:date time/Date]])\n\n; TODO add `:keyword :double` pairs when\n; https://github.com/metosin/malli/issues/682 is closed.\n(def ProcessedRow\n  [:map [:date time/Date]\n        [:timestamp time/Timestamp]])\n\n; Returns map of dates to :dated-row maps.\n;; TODO figure out how to express this in spec\n(defn get-rows-by-dates [rows]\n  ; TODO find out how to get spec to do this assert for me\n  ; (assert (:date (first rows)))\n  (into (sorted-map) (map (fn [row] [(:date row) row]) rows)))\n\n(defn merge-rows-using-dates\n  \"Merges N sequences of row maps (e.g. from different spreadsheets) using\n  the :date field as the joining attribute.\"\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential DatedRow]]}\n  [& sets-of-rows]\n  (vals (apply merge-with (fn [row1 row2] (merge row1 row2))\n               (map get-rows-by-dates sets-of-rows))))\n\n\n(defn add-timestamps\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (map #(assoc % :timestamp (time/date-to-timestamp (:date %))) data))\n\n(defn not-NaN\n  [v]\n  (not (or (nil? v) (= \"\" v))))\n\n(defn floatify-data\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (for [row data]\n    (into {} (for [[k v] row\n                   :when (not-NaN v)]\n               [k (if (= k :date) v (js/parseFloat v))]))))\n\n(floatify-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}])\n\n; TODO add spec validation to this function\n(defn get-all-data-validation-string\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  specs/Hiccup]}\n  [& sets-of-rows]\n  (let [headers (remove #(= :date %)\n                        (flatten (map #(keys (first %)) sets-of-rows)))\n        duplicate-headers (for [[id freq] (frequencies headers)\n                                :when (> freq 1)]\n                            id)]\n    (if (seq duplicate-headers)  ; if not empty\n      [:div {:style {:color \"red\"}}\n       \"Some inputs headers were duplicated: \" (st/join \", \" duplicate-headers)]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(defn dups [sequence]\n  (for [[element freq] (frequencies sequence)\n        :when (> freq 1)]\n   element))\n\n(defn get-validation-string\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  specs/Hiccup]}\n  [rows]\n  (let [duplicate-dates (dups (map :date rows))]\n    (if (> (count duplicate-dates) 0)\n      [:div {:style {:color \"red\"}}\n       \"Repeated dates found in file \" (str duplicate-dates) \"!\"]\n      [:div {:style {:color \"green\"}} \"Data validated successfully\"])))\n\n(defn process-csv-data\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential ProcessedRow]]}\n  [& sets-of-rows]\n  (-> (apply merge-rows-using-dates sets-of-rows)\n    add-timestamps\n    floatify-data))\n\n(process-csv-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}\n                   {:a \"100\" :b \"20\" :date \"4/2/10\"}]\n                  [{:c \"100\" :d \"20\" :date \"4/2/10\"}\n                   {:c \"\" :d \"20\" :date \"4/2/10\"}])\n\n(defn combine-rows\n  {:malli/schema [:=> [:cat [:=> [:cat [:sequential :double]] :double]\n                            [:sequential ProcessedRow]]\n                  ProcessedRow]}\n  [aggregation-fn rows]\n  (let [earliest-row (first (sort-by :timestamp rows))\n        unique-keys (reduce union (for [row rows] (set (keys row))))]\n    (-> (into {} (for [k unique-keys\n                       :when (not (contains? #{:timestamp :date} k))]\n                   [k (aggregation-fn (filter #(not (nil? %)) (map k rows)))]))\n        (assoc :timestamp (:timestamp earliest-row))\n        (assoc :date      (:date earliest-row)))))\n\n(combine-rows math/average [{:b 50} {:a 20 :b 40}])\n\n(defn aggregate-data\n  \"Merges data points in the input together if they fall inside the same time\n  window. The merged data point will use the earliest timestamp from all the points\n  in the same window.\"\n  {:malli/schema [:=> [:cat [:sequential ProcessedRow]\n                            time/PeriodIdTypes\n                            [:=> [:cat [:sequential :double]] :double]]\n                  [:map-of :string ProcessedRow]]}\n  [rows period-type aggregation-fn]\n  (into {} (for [[period grouped-rows] (time/group-by-period rows period-type)]\n             [period (combine-rows aggregation-fn grouped-rows)])))\n"]}