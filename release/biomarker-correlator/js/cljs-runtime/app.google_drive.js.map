{"version":3,"sources":["app/google_drive.cljs"],"mappings":"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","names":["app.google-drive/found-files","reagent.core.atom","app.google-drive/get-biomarker-correlator-folder-request","app.google-drive/list-files-requests","cljs.core.async.chan","app.google-drive/listed-files","c__36136__auto__","cljs.core.async.impl.dispatch/run","f__36137__auto__","switch__36066__auto__","state_58057","state_val_58058","statearr-58067","inst_58032","inst_58033","inst_58034","inst_58035","inst_58037","inst_58038","cljs.core/PersistentHashMap","statearr-58069","cljs.core.async.impl.ioc-helpers/take!","inst_58050","cljs.core.async.impl.ioc-helpers/return-chan","inst_58040","inst_58041","inst_58042","inst_58043","inst_58044","inst_58045","statearr-58071","statearr-58075","statearr-58077","state-machine__36067__auto__","ret-value__36068__auto__","result__36069__auto__","cljs.core/keyword-identical?","ex__36070__auto__","e58080","statearr-58082","cljs.core/seq","statearr-58085","cljs.core/first","state__36138__auto__","statearr-58088","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/gapi","cljs.core/clj->js","cljs.core.merge","response","cljs.core.async.put_BANG_","cljs.core.js__GT_clj","app.google-drive/get-single-file-id","list-files-response","files","js/Error","cljs.core._EQ_","cljs.core/count","app.google-drive/get-file-ids","app.google-drive/file-datas","state_58131","state_val_58132","statearr-58137","inst_58113","inst_58114","inst_58115","inst_58118","statearr-58138","inst_58129","inst_58120","inst_58121","inst_58122","inst_58123","inst_58124","inst_58125","inst_58126","statearr-58145","statearr-58148","statearr-58153","e58155","statearr-58156","statearr-58159","statearr-58160","app.google-drive/get-file-data","file-id","data-key","cljs.core.async.take_BANG_","cljs.core.swap_BANG_","app.csv/csv-data","cljs.core/assoc","app.csv/my-parse-csv","app.google-drive/get-data-key","file-name","clojure.string/ends-with?","clojure.string/includes?","app.google-drive/get-folder-file-data","folder-id","seq__58182","chunk__58183","count__58184","i__58185","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","file","cljs.core/conj","app.google-drive/populate-data!","p1__58216#"],"sourcesContent":["; Depends on code in public/js/gdrive.js to setup the js/gapi.\n(ns app.google-drive\n  (:require\n    [app.csv :as csv]\n    [reagent.core :as r]\n    [cljs.core.async :refer [chan put! take! >! <! buffer dropping-buffer sliding-buffer timeout close! alts!]]\n    [cljs.core.async :refer-macros [go go-loop alt!]]\n    [clojure.string :as st]))\n\n; Defined in publi/js/gdrive.js\n; (js/handleClientLoad)\n\n(def found-files\n  (r/atom []))\n\n(def get-biomarker-correlator-folder-request\n  {:pageSize 100\n   :q \"mimeType='application/vnd.google-apps.folder'\n       and name='biomarker-correlator'\"\n   :fields \"nextPageToken, files(id, name)\"})\n\n; Check out\n; https://www.learn-clojurescript.com/section-4/lesson-25-intro-to-core-async/\n; for a good explanation of how these channels work.\n(def list-files-requests (chan))\n(def listed-files (chan))\n\n; Calls the files.list Google Drive API and puts the results into listed-files.\n(go-loop []\n  (. (.. js/gapi -client -drive -files\n       (list\n         ; Update request with default parameters if they are not provided.\n         (clj->js (merge {:pageSize 100\n                          :fields \"nextPageToken, files(id, name)\"}\n                         (<! list-files-requests)))))\n     (then (fn [response]\n             (put! listed-files (js->clj response :keywordize-keys true)))))\n  (recur))\n\n(defn get-single-file-id\n  \"Gets the single file id in a list-files response.\"\n  [list-files-response]\n  (let [files (:files (:result list-files-response))]\n    (assert (= 1 (count files)))\n    (:id (first files))))\n\n(def get-file-ids (chan))\n(def file-datas (chan))\n\n; Calls the files.get Google Drive API and puts the results into file-datas.\n(go-loop []\n  (. (.. js/gapi -client -drive -files\n       (get (clj->js {:fileId (<! get-file-ids)\n                      :alt \"media\"})))\n     (then (fn [response]\n             (put! file-datas (js->clj response :keywordize-keys true)))))\n  (recur))\n\n(defn get-file-data\n  [file-id data-key]\n  (put! get-file-ids file-id)\n  (take! file-datas\n         (fn [response]\n           (swap! csv/csv-data assoc\n                  data-key (csv/my-parse-csv (:body response))))))\n\n(defn get-data-key\n  \"Returns the key under which to add the data to the csv-data atom. Returns\n  nil if the file in question should not be parsed (it is not a csv file, or\n  otherwise isn't parsable)\"\n  [file-name]\n  (cond\n    (not (st/ends-with? file-name \".csv\")) nil\n    (st/includes? file-name \"biomarker\") :biomarker-data\n    (st/includes? file-name \"input\") :input-data\n    :else nil))\n\n(defn get-folder-file-data\n  \"Gets data for all files in the folder with the given id.\"\n  [folder-id]\n  (put! list-files-requests {:q (str \"'\" folder-id \"' in parents\")})\n  (take! listed-files\n         (fn [response] \n           (let [files (:files (:result response))]\n             ; doseq is the right choice here, but i have absolutely no idea why\n             ; `map` and `for` don't seem to work.\n             (doseq [file files]\n               (let [data-key (get-data-key (:name file))]\n                 (if data-key\n                   (do\n                     (get-file-data (:id file) data-key)\n                     (swap! found-files conj (:name file)))\n                   ())))))))\n\n(defn populate-data!\n  \"Populates the data atom with a map from filenames to csv data for all\n   datafiles in the 'biomarker-correlator' Google Drive folder.\"\n  []\n  (put! list-files-requests {:q \"mimeType='application/vnd.google-apps.folder'\n                               and name='biomarker-correlator'\"})\n  (take! listed-files #(get-folder-file-data (get-single-file-id %))))\n"]}