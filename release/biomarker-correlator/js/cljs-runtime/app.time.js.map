{"version":3,"sources":["app/time.cljs"],"mappings":";AAOA,sBAAA,tBAAMA,oDACHC;AADH,AAEE,IAAMC,QAAM,oFAAA,pFAACC,mDAAS,AAACC,oBAAQH;AAA/B,AACE,GAAI,GAAK,6CAAA,7CAACI,iDAAI,AAACC,gBAAMJ;AAArB;;AAEE,IAAAK,aAAuBL;YAAvB,AAAAM,4CAAAD,WAAA,IAAA,nEAAOE;UAAP,AAAAD,4CAAAD,WAAA,IAAA,jEAAaG;WAAb,AAAAF,4CAAAD,WAAA,IAAA,lEAAiBI;AAAjB,AAAA,kDAAA,sEAAA,kEAAA,hFACU,SAAA,RAAKF,mEACN,OAAA,NAAKC,+DACL,CAAK,iBAAAE,WAAM,AAACN,gBAAMK;AAAb,AAAA,QAAAC;KAAA;AACK,QAAA,iDAAUD;;;KADf;AAEKA;;;;AAFL;;;OAAL;;;AAKf,4BAAA,oCAAAE,hEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEACWL;WADX,AAAAO,4CAAAF,eAAA,lEACiBI;WADjB,AAAAF,4CAAAF,eAAA,lEACsBH;AADtB,AAEE,OAACQ,yBAAQ,AAACC,uDAAUT,KAAKF,MAAMS;;AAEjC,gBAAA,hBAAKG;AACL,qBAAA,mFAAA,mDAAA,oDAAA,mFAAA,iDAAA,nVAAKC;AAEL,oBAAA,mFAAA,mDAAA,mFAAA,wDAAA,4DAAA,mFAAA,sDAAA,4DAAA,mFAAA,oDAAA,7qBAAKC;AAIL;;;;;4BAAA,5BAAMC,gEAKHC;AALH,AAME,IAAMC,aAAW,8DAAA,9DAACvB,mDAASsB;AAA3B,AACE,GACE,6CAAA,7CAACpB,iDAAI,AAACC,gBAAMoB;AAAa,OAAC1B,oBAAW,AAAC2B,gBAAMD;;AAD9C,AAGE,IAAAE,aAAoBF;YAApB,AAAAlB,4CAAAoB,WAAA,IAAA,nEAAOC;YAAP,AAAArB,4CAAAoB,WAAA,IAAA,nEAAaE;IACPC,UAAQ,AAAC/B,oBAAW6B;IACpBG,UAAQ,AAAChC,oBAAW8B;AAF1B,AAGE,GAAI,YAAA,XAAMC;AACRC;;AACAD;;;;;AAEV,mDAAA,QAAA,3DAAC5B","names":["app.time/parse-date","date-string","split","clojure.string.split","clojure.string/trim","cljs.core._EQ_","cljs.core/count","vec__81639","cljs.core.nth","month","day","year","G__81642","p__81643","map__81644","cljs.core/--destructure-map","cljs.core.get","app.time/map-to-timestamp","date","cljs-time.coerce/to-long","cljs_time.core.date_time","app.time/Date","app.time/Timestamp","app.time/VegaDate","app.time/parse-date-range","date-range","split-date","cljs.core/first","vec__81646","date1","date2","parsed1","parsed2"],"sourcesContent":["(ns app.time\n  (:require\n    [cljs-time.core :refer [date-time]]\n    [cljs-time.coerce :refer [to-long]]\n    [clojure.string :as st]))\n\n\n(defn parse-date\n  [date-string]\n  (let [split (st/split (st/trim date-string) \"/\")]\n    (if (not (= 3 (count split)))\n      nil\n      (let [[month day year] split]\n        {:month (int month)\n         :date (int day)\n         :year (int (case (count year)\n                       2 (str \"20\" year)\n                       4 year\n                       nil))}))))\n\n(defn map-to-timestamp\n  [{:keys [month date year]}]\n  (to-long (date-time year month date)))\n\n(def Date :string)\n(def Timestamp [:and :int [:>= 0]])\n; Outputs dates in format https://vega.github.io/vega-lite/docs/datetime.html\n(def VegaDate [:map [:month :int]\n                    [:date :int]\n                    [:year :int]])\n\n(defn parse-date-range\n  \"Converts a range like '1/1/2021 to 2/1/2021' into a single date. Will return\n  the first date unless it is unparsable, in which case will return the second.\n  If no 'to' is in the string, will just return the only date (if it is one).\"\n  {:malli/schema [:=> [:cat Date] VegaDate]}\n  [date-range]\n  (let [split-date (st/split date-range \" to \")]\n    (cond\n      (= 1 (count split-date)) (parse-date (first split-date))\n      :else\n      (let [[date1 date2] split-date \n            parsed1 (parse-date date1)\n            parsed2 (parse-date date2)]\n        (if (nil? parsed1)\n          parsed2\n          parsed1)))))\n\n(st/split \"4/4/4\" \" to \")\n"]}