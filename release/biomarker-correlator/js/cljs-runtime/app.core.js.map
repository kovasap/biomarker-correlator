{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.spec.alpha.every_impl","G__59306","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__59307","cljs.core/map?","cljs.core/contains?","app.core/get-vars","data","p1__59317#","cljs.core.filter","cljs.core.not_EQ_","cljs.core/keys","cljs.core/first","app.core/flatten-map","cljs.core.into","cljs.core/sorted-map-by","cljs.core/<","p1__59318#","cljs.core/vector?","cljs.core/last","cljs.core/tree-seq","cljs.core/associative?","cljs.core/seq","app.core/home-page","map__59322","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","input-file-name","biomarker-file-name","input-data","biomarker-data","app.csv/csv-data","inputs","biomarkers","processed-data","app.csv_data_processing.process_csv_data","pairwise-correlations","app.stats/compute-correlations","input-correlations","app.single-var-table/make-all-correlations","biomarker-correlations","pairwise-correlations-for-table","p1__59319#","cljs.core.map","cljs.core.update_in","cljs.core/dissoc","flat-results","flat-results-atom","reagent.core.atom","app.google-drive/populate-data!","app.google-drive/found-files","app.csv/upload-btn","app.csv/input-upload-reqs","app.csv/biomarker-upload-reqs","app.csv-data-processing/get-validation-string","app.csv_data_processing.get_all_data_validation_string","app.ui.maps_to_datagrid","app.comparison-matrix-table/make-comparison-matrix-data","app.comparison-matrix-table/make-datagrid-column","app.ui/hideable","app.ui/maps-to-datagrid","iter__4652__auto__","s__59325","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__59327","cljs.core/chunk-buffer","i__59326","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59324","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","sig-correlations","cljs.core/vals","app.single-var-table/make-hiccup","s__59331","b__59335","i__59333","iter__59329","app.core/mount-root","reagent.dom.render","js/document","app.core/refresh","cljs.core.prn","app.core/init!","cljs.core/chunk-first"],"sourcesContent":["(ns app.core\n  ; #:ghostwheel.core {:check     true\n  ;                    :num-tests 10\n  (:require\n    [app.google-drive :as gd]\n    [app.csv :as csv]\n    [app.stats :as stats]\n    ; Load namespace for malli checking.\n    [app.biomarker-data]\n    [app.specs :as specs]\n    [app.csv-data-processing :as proc]\n    [app.comparison-matrix-table :as comp-matrix-tbl]\n    [app.single-var-table :as single-var-table]\n    [app.ui :as ui]\n    [malli.core :as m]\n    [malli.instrument.cljs :as mi]\n    ; Uncomment when https://github.com/metosin/malli/pull/655 is in.\n    [malli.dev.cljs :as dev]\n    [malli.dev.pretty :as pretty]\n    [cljs.spec.alpha :as s]\n    [ghostwheel.core :as g :refer [>defn >defn- >fdef => | <- ?]]\n    [reagent.core :as r]\n    [reagent.dom :as d]))\n\n(s/def ::input keyword?)\n(s/def ::biomarker keyword?)\n(s/def ::pairwise-correlations \n  (s/coll-of (s/keys :req-un [::input\n                              ::biomarker\n                              :app.stats/regression-results])))\n\n(defn get-vars\n  \"Gets all variables (csv columns) from parsed csv maps besides the date.\"\n  {:malli/schema [:=> [:cat proc/DatedRows]\n                  [:sequential :keyword]]}\n  [data]\n  (filter #(not= % :date) (keys (first data))))\n\n(defn flatten-map\n  \"Converts map like {:input :hi :results {:slope 50}} to\n  {:input :hi :slope 50}\"\n  [data]\n  (into (sorted-map-by <) (filter #(and (vector? %) (not (map? (last %))))\n                                (tree-seq associative? seq data))))\n\n \n(defn home-page []\n  (let [{:keys [input-file-name biomarker-file-name\n                input-data biomarker-data]} @csv/csv-data\n        inputs (get-vars input-data)\n        biomarkers (get-vars biomarker-data)\n        processed-data (proc/process-csv-data input-data biomarker-data)\n        pairwise-correlations (stats/compute-correlations\n                                inputs biomarkers processed-data)\n        input-correlations (single-var-table/make-all-correlations\n                             pairwise-correlations processed-data\n                             :input :biomarker)\n        biomarker-correlations (single-var-table/make-all-correlations\n                                 pairwise-correlations processed-data\n                                 :biomarker :input)\n        pairwise-correlations-for-table (map\n                                         #(update-in % [:regression-results]\n                                                     dissoc :scatterplot\n                                                     :raw-data)\n                                         pairwise-correlations)\n        flat-results (map flatten-map pairwise-correlations-for-table)\n        flat-results-atom (r/atom flat-results)]\n    [:div.app.content\n     [:h1.title \"Biomarker Correlator\"]\n     [:p \"This application calculates cross correlations between inputs and\n      biomarkers in an attempt to identify statistically significant\n      correlations. \"]\n     [:p \"Despite presenting like a website, there is no server\n      behind this app that data is sent to for analysis; everything is done\n      client side in the browser. Therefore, the page can be saved and run\n      offline as needed.\"]\n     ; Google drive integration controlled by public/js/gdrive.js.\n     [:h3 \"Data Ingestion\"]\n     [:h4 \"Google Drive Integration\"]\n     [:p \"Once signed in and authorized, this application will search through\n      your Google Drive, find a folder named \\\"biomarker-correlator\\\", and then\n      process the files within that folder. Any CSV files with \\\"inputs\\\" in\n      the name will be treated as the input data files and any with \\\"biomarkers\\\"\n      in the name will be treated as the biomarker data files.\"]\n     [:p \"If you are getting permissions issues, note that you need to be\n      whitelisted as this app is currently not verified with Google. Please\n      contact kovas.palunas@gmail.com if you want to be whitelisted.\"]\n     [:button {:id \"authorize_button\" :style {:display \"none\"}} \"Authorize\"]\n     [:button {:id \"signout_button\" :style {:display \"none\"}} \"Sign Out\"]\n     [:button {:on-click #(gd/populate-data!)}\n              \"Fetch Google Drive Data\"]\n     [:pre \"Found files \" (str @gd/found-files)]\n\n     [:h4 \"CSV\"]\n     [:div.topbar.hidden-print \"\\\"Upload\\\" input data\"\n      [csv/upload-btn input-file-name csv/input-upload-reqs]]\n     [:div.topbar.hidden-print \"\\\"Upload\\\" biomarker data\"\n      [csv/upload-btn biomarker-file-name csv/biomarker-upload-reqs]]\n     [:br]\n     [:div \"Input validation: \" (proc/get-validation-string input-data)]\n     [:div \"Biomarker validation: \" (proc/get-validation-string biomarker-data)]\n     [:div \"Cross data validation: \" (proc/get-all-data-validation-string\n                                       input-data biomarker-data)]\n     [:h3 \"Per-Input Table\"]\n     [:p \"Not statistically significant results are displayed with greyed-out\n      text.  The score for each input is calculated as the number of\n      statistically significant correlations that are positive, minus the number\n      that are negative.  We need a spreadsheet (or something built in to the\n      app) that determines for each biomarker whether up is good or bad with\n      respect to calculating the score.\"]\n     (ui/maps-to-datagrid\n       (comp-matrix-tbl/make-comparison-matrix-data\n        pairwise-correlations-for-table\n        input-correlations)\n       :custom-make-datagrid-column comp-matrix-tbl/make-datagrid-column)\n     [:h3 \"Pairwise Table\"]\n     [ui/hideable\n       (ui/maps-to-datagrid flat-results)] \n     ; [ui/hideable\n     ;   (ui/reagent-table flat-results-atom)]\n     [:h3 \"Significant Correlations\"]\n     [:div\n      [:h4 \"Input Correlations\"]\n      (into [:div]\n            (for [sig-correlations (vals input-correlations)]\n              (single-var-table/make-hiccup sig-correlations))) \n      [:h4 \"Biomarker Correlations\"]\n      (into [:div]\n            (for [sig-correlations (vals biomarker-correlations)]\n              (single-var-table/make-hiccup sig-correlations)))]]))\n\n; Run ghostwheel generative tests\n; TODO determine if there is a better place for this.\n; (g/check)\n\n;; -------------------------\n;; Initialize app\n\n(defn ^:dev/after-load mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n\n(defn ^:dev/after-load refresh []\n  (prn \"Hot code Remount\")\n  ; Check all malli function \"specs\"\n  ; TODO use the dev namespace once the PR referenced in\n  ; https://github.com/metosin/malli/issues/654#issuecomment-1065650984 is\n  ; merged.\n  ; (dev/start! {:report (pretty/reporter)})\n  ; (malli.dev.cljs/collect-all!)\n  ; (malli.instrument.cljs/instrument!)\n  (mount-root))\n\n(defn ^:export init! []\n  ; (malli.dev.cljs/collect-all!)\n  ; (malli.instrument.cljs/instrument!)\n  (mount-root))\n"]}